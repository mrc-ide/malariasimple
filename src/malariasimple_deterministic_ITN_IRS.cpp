// Generated by dust2 (version 0.3.19) - do not edit

// Generated by odin2 (version 0.3.15) - do not edit
#include <dust2/common.hpp>
// [[dust2::class(malariasimple_deterministic_ITN_IRS)]]
// [[dust2::time_type(discrete)]]
// [[dust2::parameter(n_days, type = "int", rank = 0, required = TRUE, constant = TRUE)]]
// [[dust2::parameter(daily_rain_input, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(days, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(na, type = "int", rank = 0, required = TRUE, constant = TRUE)]]
// [[dust2::parameter(nh, type = "int", rank = 0, required = TRUE, constant = TRUE)]]
// [[dust2::parameter(ft, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(eta, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(age_rate, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(het_wt, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(rA, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(rT, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(rD, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(rU, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(rP, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(init_S, type = "real_type", rank = 3, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(init_T, type = "real_type", rank = 3, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(init_D, type = "real_type", rank = 3, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(init_A, type = "real_type", rank = 3, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(init_U, type = "real_type", rank = 3, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(init_P, type = "real_type", rank = 3, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(dE, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(lag_rates, type = "int", rank = 0, required = TRUE, constant = TRUE)]]
// [[dust2::parameter(FOI_eq, type = "real_type", rank = 2, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(psi, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(zeta, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(dCM, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(uCA, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(dCA, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(dB, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(uB, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(dID, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(uD, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(x_I, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(age20l, type = "int", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(age20u, type = "int", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(age_20_factor, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(PM, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(init_ICM, type = "real_type", rank = 3, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(init_ICA, type = "real_type", rank = 3, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(init_IB, type = "real_type", rank = 3, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(init_ID, type = "real_type", rank = 3, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(phi0, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(phi1, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(IC0, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(kC, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(b0, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(b1, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(kB, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(IB0, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(aD, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(fD0, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(gammaD, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(d1, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(ID0, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(kD, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(age_vector, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(init_Sv, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(init_Pv, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(init_Iv, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(cU, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(cD, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(cT, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(gamma1, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(lag_ratesMos, type = "int", rank = 0, required = TRUE, constant = TRUE)]]
// [[dust2::parameter(FOIv_eq, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(omega, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(delayGam, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(delayMos, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(human_pop, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(dLL, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(dPL, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(dEL, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(muLL, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(muEL, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(muPL, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(gammaL, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(mv0, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(mum, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(foraging_time, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(gonotrophic_cycle, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(betaL, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(init_PL, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(init_LL, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(init_EL, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(max_irs_cov, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(phi_indoors, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(irs_eff_cov_daily, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(ss, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(rs, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(max_itn_cov, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(Q0, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(phi_bednets, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(r_itn_daily, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(s_itn_daily, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(itn_eff_cov_daily, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(num_int, type = "int", rank = 0, required = TRUE, constant = TRUE)]]
// [[dust2::parameter(prev_dim, type = "int", rank = 0, required = TRUE, constant = TRUE)]]
// [[dust2::parameter(min_age_prev, type = "int", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(max_age_prev, type = "int", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(inc_dim, type = "int", rank = 0, required = TRUE, constant = TRUE)]]
// [[dust2::parameter(min_age_inc, type = "int", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(max_age_inc, type = "int", rank = 1, required = TRUE, constant = FALSE)]]
class malariasimple_deterministic_ITN_IRS {
public:
  malariasimple_deterministic_ITN_IRS() = delete;
  using real_type = double;
  using rng_state_type = monty::random::generator<real_type>;
  struct shared_state {
    struct odin_internals_type {
      struct {
        dust2::packing state;
      } packing;
      struct {
        std::array<size_t, 63> state;
      } offset;
    } odin;
    struct dim_type {
      dust2::array::dimensions<1> daily_rain_input;
      dust2::array::dimensions<1> days;
      dust2::array::dimensions<1> age_rate;
      dust2::array::dimensions<1> het_wt;
      dust2::array::dimensions<3> init_S;
      dust2::array::dimensions<3> S;
      dust2::array::dimensions<3> init_T;
      dust2::array::dimensions<3> T;
      dust2::array::dimensions<3> init_D;
      dust2::array::dimensions<3> D;
      dust2::array::dimensions<3> init_A;
      dust2::array::dimensions<3> A;
      dust2::array::dimensions<3> init_U;
      dust2::array::dimensions<3> U;
      dust2::array::dimensions<3> init_P;
      dust2::array::dimensions<3> P;
      dust2::array::dimensions<3> births;
      dust2::array::dimensions<3> ST_rate;
      dust2::array::dimensions<3> SD_rate;
      dust2::array::dimensions<3> SA_rate;
      dust2::array::dimensions<3> ST_trans;
      dust2::array::dimensions<3> SD_trans;
      dust2::array::dimensions<3> SA_trans;
      dust2::array::dimensions<3> S_death;
      dust2::array::dimensions<3> S_age;
      dust2::array::dimensions<3> TP_trans;
      dust2::array::dimensions<3> T_death;
      dust2::array::dimensions<3> T_age;
      dust2::array::dimensions<3> DA_trans;
      dust2::array::dimensions<3> D_death;
      dust2::array::dimensions<3> D_age;
      dust2::array::dimensions<3> AT_rate;
      dust2::array::dimensions<3> AD_rate;
      dust2::array::dimensions<3> AU_trans;
      dust2::array::dimensions<3> AT_trans;
      dust2::array::dimensions<3> AD_trans;
      dust2::array::dimensions<3> A_age;
      dust2::array::dimensions<3> A_death;
      dust2::array::dimensions<3> UA_rate;
      dust2::array::dimensions<3> UD_rate;
      dust2::array::dimensions<3> UT_rate;
      dust2::array::dimensions<3> UA_trans;
      dust2::array::dimensions<3> UD_trans;
      dust2::array::dimensions<3> UT_trans;
      dust2::array::dimensions<3> US_trans;
      dust2::array::dimensions<3> U_age;
      dust2::array::dimensions<3> U_death;
      dust2::array::dimensions<3> PS_trans;
      dust2::array::dimensions<3> P_death;
      dust2::array::dimensions<3> P_age;
      dust2::array::dimensions<3> FOI_lag;
      dust2::array::dimensions<2> FOI_eq;
      dust2::array::dimensions<4> FOI_XL;
      dust2::array::dimensions<3> FOI;
      dust2::array::dimensions<1> psi;
      dust2::array::dimensions<1> zeta;
      dust2::array::dimensions<3> EIR;
      dust2::array::dimensions<1> x_I;
      dust2::array::dimensions<3> init_ICM;
      dust2::array::dimensions<3> ICM;
      dust2::array::dimensions<2> init_ICM_pre;
      dust2::array::dimensions<3> init_ICA;
      dust2::array::dimensions<3> ICA;
      dust2::array::dimensions<3> IC;
      dust2::array::dimensions<3> init_IB;
      dust2::array::dimensions<3> IB;
      dust2::array::dimensions<3> init_ID;
      dust2::array::dimensions<3> ID;
      dust2::array::dimensions<3> phi;
      dust2::array::dimensions<3> b;
      dust2::array::dimensions<1> age_vector;
      dust2::array::dimensions<1> fd;
      dust2::array::dimensions<3> p_det;
      dust2::array::dimensions<3> cA;
      dust2::array::dimensions<1> FOIv;
      dust2::array::dimensions<3> FOIvijk;
      dust2::array::dimensions<1> ince_delay;
      dust2::array::dimensions<1> irs_eff_cov_daily;
      dust2::array::dimensions<1> ss;
      dust2::array::dimensions<1> rs;
      dust2::array::dimensions<1> r_itn_daily;
      dust2::array::dimensions<1> s_itn_daily;
      dust2::array::dimensions<1> itn_eff_cov_daily;
      dust2::array::dimensions<1> cov_;
      dust2::array::dimensions<1> cov;
      dust2::array::dimensions<1> w_;
      dust2::array::dimensions<1> w;
      dust2::array::dimensions<1> yy_;
      dust2::array::dimensions<1> yy;
      dust2::array::dimensions<1> z_;
      dust2::array::dimensions<1> z;
      dust2::array::dimensions<1> zhi;
      dust2::array::dimensions<1> whi;
      dust2::array::dimensions<1> av_mosq;
      dust2::array::dimensions<1> av_human;
      dust2::array::dimensions<3> clin_inc;
      dust2::array::dimensions<1> min_age_prev;
      dust2::array::dimensions<1> max_age_prev;
      dust2::array::dimensions<1> n_prev;
      dust2::array::dimensions<3> detect_prev_full;
      dust2::array::dimensions<1> detect_prev;
      dust2::array::dimensions<1> n_ud_prev;
      dust2::array::dimensions<1> n_ud_detect_prev;
      dust2::array::dimensions<1> min_age_inc;
      dust2::array::dimensions<1> max_age_inc;
      dust2::array::dimensions<1> n_ud_inc;
      dust2::array::dimensions<3> all;
      dust2::array::dimensions<3> icm_pop;
      dust2::array::dimensions<3> ica_pop;
      dust2::array::dimensions<3> id_pop;
      dust2::array::dimensions<3> ib_pop;
      dust2::array::dimensions<3> ic_pop;
      dust2::array::dimensions<3> all_deaths;
      dust2::array::dimensions<3> all_eir;
      dust2::array::dimensions<3> epsilon_0;
      dust2::array::dimensions<3> epsilon_0_no_int;
      dust2::array::dimensions<3> epsilon_0_irs;
      dust2::array::dimensions<3> epsilon_0_foi;
    } dim;
    int n_days;
    int na;
    int nh;
    real_type ft;
    real_type eta;
    real_type rA;
    real_type rT;
    real_type rD;
    real_type rU;
    real_type rP;
    real_type dE;
    int lag_rates;
    real_type dCM;
    real_type uCA;
    real_type dCA;
    real_type dB;
    real_type uB;
    real_type dID;
    real_type uD;
    int age20l;
    int age20u;
    real_type age_20_factor;
    real_type PM;
    real_type phi0;
    real_type phi1;
    real_type IC0;
    real_type kC;
    real_type b0;
    real_type b1;
    real_type kB;
    real_type IB0;
    real_type aD;
    real_type fD0;
    real_type gammaD;
    real_type d1;
    real_type ID0;
    real_type kD;
    real_type init_Sv;
    real_type init_Pv;
    real_type init_Iv;
    real_type cU;
    real_type cD;
    real_type cT;
    real_type gamma1;
    int lag_ratesMos;
    real_type FOIv_eq;
    real_type omega;
    real_type delayGam;
    real_type delayMos;
    real_type human_pop;
    real_type dLL;
    real_type dPL;
    real_type dEL;
    real_type muLL;
    real_type muEL;
    real_type muPL;
    real_type gammaL;
    real_type mv0;
    real_type mum;
    real_type foraging_time;
    real_type gonotrophic_cycle;
    real_type betaL;
    real_type init_PL;
    real_type init_LL;
    real_type init_EL;
    real_type max_irs_cov;
    real_type phi_indoors;
    real_type max_itn_cov;
    real_type Q0;
    real_type phi_bednets;
    int num_int;
    real_type w1;
    real_type z1;
    int prev_dim;
    int inc_dim;
    real_type delayMos_use;
    real_type mum_use;
    real_type b_lambda;
    std::vector<real_type> cov_;
    std::vector<real_type> daily_rain_input;
    std::vector<real_type> days;
    std::vector<real_type> age_rate;
    std::vector<real_type> het_wt;
    std::vector<real_type> init_S;
    std::vector<real_type> init_T;
    std::vector<real_type> init_D;
    std::vector<real_type> init_A;
    std::vector<real_type> init_U;
    std::vector<real_type> init_P;
    std::vector<real_type> FOI_eq;
    std::vector<real_type> psi;
    std::vector<real_type> zeta;
    std::vector<real_type> x_I;
    std::vector<real_type> init_ICM;
    std::vector<real_type> init_ICA;
    std::vector<real_type> init_IB;
    std::vector<real_type> init_ID;
    std::vector<real_type> age_vector;
    real_type p10;
    real_type p2;
    std::vector<real_type> irs_eff_cov_daily;
    std::vector<real_type> ss;
    std::vector<real_type> rs;
    std::vector<real_type> r_itn_daily;
    std::vector<real_type> s_itn_daily;
    std::vector<real_type> itn_eff_cov_daily;
    std::vector<real_type> cov;
    std::vector<int> min_age_prev;
    std::vector<int> max_age_prev;
    std::vector<int> min_age_inc;
    std::vector<int> max_age_inc;
    std::vector<real_type> fd;
    dust2::interpolate::InterpolateLinear<real_type> interpolate_rain_input;
    dust2::interpolate::InterpolateLinear<real_type> interpolate_s_irs;
    dust2::interpolate::InterpolateLinear<real_type> interpolate_r_irs;
    dust2::interpolate::InterpolateLinear<real_type> interpolate_irs_eff_cov;
    dust2::interpolate::InterpolateLinear<real_type> interpolate_r_itn;
    dust2::interpolate::InterpolateLinear<real_type> interpolate_s_itn;
    dust2::interpolate::InterpolateLinear<real_type> interpolate_itn_eff_cov;
  };
  struct internal_state {
    std::vector<real_type> S_death;
    std::vector<real_type> TP_trans;
    std::vector<real_type> T_death;
    std::vector<real_type> DA_trans;
    std::vector<real_type> D_death;
    std::vector<real_type> AU_trans;
    std::vector<real_type> A_death;
    std::vector<real_type> US_trans;
    std::vector<real_type> U_death;
    std::vector<real_type> PS_trans;
    std::vector<real_type> P_death;
    std::vector<real_type> FOI;
    std::vector<real_type> init_ICM_pre;
    std::vector<real_type> IC;
    std::vector<real_type> b;
    std::vector<real_type> all;
    std::vector<real_type> births;
    std::vector<real_type> S_age;
    std::vector<real_type> T_age;
    std::vector<real_type> D_age;
    std::vector<real_type> A_age;
    std::vector<real_type> U_age;
    std::vector<real_type> P_age;
    std::vector<real_type> phi;
    std::vector<real_type> n_prev;
    std::vector<real_type> icm_pop;
    std::vector<real_type> ica_pop;
    std::vector<real_type> id_pop;
    std::vector<real_type> ib_pop;
    std::vector<real_type> ic_pop;
    std::vector<real_type> all_deaths;
    std::vector<real_type> epsilon_0_foi;
    std::vector<real_type> ST_rate;
    std::vector<real_type> SD_rate;
    std::vector<real_type> SA_rate;
    std::vector<real_type> AT_rate;
    std::vector<real_type> AD_rate;
    std::vector<real_type> UA_rate;
    std::vector<real_type> UD_rate;
    std::vector<real_type> UT_rate;
    std::vector<real_type> p_det;
    std::vector<real_type> ST_trans;
    std::vector<real_type> SD_trans;
    std::vector<real_type> SA_trans;
    std::vector<real_type> AT_trans;
    std::vector<real_type> AD_trans;
    std::vector<real_type> UA_trans;
    std::vector<real_type> UD_trans;
    std::vector<real_type> UT_trans;
    std::vector<real_type> cA;
    std::vector<real_type> detect_prev_full;
    std::vector<real_type> w_;
    std::vector<real_type> z_;
    std::vector<real_type> clin_inc;
    std::vector<real_type> detect_prev;
    std::vector<real_type> w;
    std::vector<real_type> yy_;
    std::vector<real_type> z;
    std::vector<real_type> yy;
    std::vector<real_type> zhi;
    std::vector<real_type> whi;
    std::vector<real_type> av_mosq;
    std::vector<real_type> av_human;
    std::vector<real_type> EIR;
    std::vector<real_type> FOIvijk;
    std::vector<real_type> FOI_lag;
    std::vector<real_type> all_eir;
    std::vector<real_type> epsilon_0;
    std::vector<real_type> epsilon_0_no_int;
    std::vector<real_type> epsilon_0_irs;
  };
  using data_type = dust2::no_data;
  static dust2::packing packing_state(const shared_state& shared) {
    return shared.odin.packing.state;
  }
  static shared_state build_shared(cpp11::list parameters) {
    shared_state::dim_type dim;
    const int n_days = dust2::r::read_int(parameters, "n_days");
    const int na = dust2::r::read_int(parameters, "na");
    const int nh = dust2::r::read_int(parameters, "nh");
    const real_type ft = dust2::r::read_real(parameters, "ft");
    const real_type eta = dust2::r::read_real(parameters, "eta");
    const real_type rA = dust2::r::read_real(parameters, "rA");
    const real_type rT = dust2::r::read_real(parameters, "rT");
    const real_type rD = dust2::r::read_real(parameters, "rD");
    const real_type rU = dust2::r::read_real(parameters, "rU");
    const real_type rP = dust2::r::read_real(parameters, "rP");
    const real_type dE = dust2::r::read_real(parameters, "dE");
    const int lag_rates = dust2::r::read_int(parameters, "lag_rates");
    const real_type dCM = dust2::r::read_real(parameters, "dCM");
    const real_type uCA = dust2::r::read_real(parameters, "uCA");
    const real_type dCA = dust2::r::read_real(parameters, "dCA");
    const real_type dB = dust2::r::read_real(parameters, "dB");
    const real_type uB = dust2::r::read_real(parameters, "uB");
    const real_type dID = dust2::r::read_real(parameters, "dID");
    const real_type uD = dust2::r::read_real(parameters, "uD");
    const int age20l = dust2::r::read_int(parameters, "age20l");
    const int age20u = dust2::r::read_int(parameters, "age20u");
    const real_type age_20_factor = dust2::r::read_real(parameters, "age_20_factor");
    const real_type PM = dust2::r::read_real(parameters, "PM");
    const real_type phi0 = dust2::r::read_real(parameters, "phi0");
    const real_type phi1 = dust2::r::read_real(parameters, "phi1");
    const real_type IC0 = dust2::r::read_real(parameters, "IC0");
    const real_type kC = dust2::r::read_real(parameters, "kC");
    const real_type b0 = dust2::r::read_real(parameters, "b0");
    const real_type b1 = dust2::r::read_real(parameters, "b1");
    const real_type kB = dust2::r::read_real(parameters, "kB");
    const real_type IB0 = dust2::r::read_real(parameters, "IB0");
    const real_type aD = dust2::r::read_real(parameters, "aD");
    const real_type fD0 = dust2::r::read_real(parameters, "fD0");
    const real_type gammaD = dust2::r::read_real(parameters, "gammaD");
    const real_type d1 = dust2::r::read_real(parameters, "d1");
    const real_type ID0 = dust2::r::read_real(parameters, "ID0");
    const real_type kD = dust2::r::read_real(parameters, "kD");
    const real_type init_Sv = dust2::r::read_real(parameters, "init_Sv");
    const real_type init_Pv = dust2::r::read_real(parameters, "init_Pv");
    const real_type init_Iv = dust2::r::read_real(parameters, "init_Iv");
    const real_type cU = dust2::r::read_real(parameters, "cU");
    const real_type cD = dust2::r::read_real(parameters, "cD");
    const real_type cT = dust2::r::read_real(parameters, "cT");
    const real_type gamma1 = dust2::r::read_real(parameters, "gamma1");
    const int lag_ratesMos = dust2::r::read_int(parameters, "lag_ratesMos");
    const real_type FOIv_eq = dust2::r::read_real(parameters, "FOIv_eq");
    const real_type omega = dust2::r::read_real(parameters, "omega");
    const real_type delayGam = dust2::r::read_real(parameters, "delayGam");
    const real_type delayMos = dust2::r::read_real(parameters, "delayMos");
    const real_type human_pop = dust2::r::read_real(parameters, "human_pop");
    const real_type dLL = dust2::r::read_real(parameters, "dLL");
    const real_type dPL = dust2::r::read_real(parameters, "dPL");
    const real_type dEL = dust2::r::read_real(parameters, "dEL");
    const real_type muLL = dust2::r::read_real(parameters, "muLL");
    const real_type muEL = dust2::r::read_real(parameters, "muEL");
    const real_type muPL = dust2::r::read_real(parameters, "muPL");
    const real_type gammaL = dust2::r::read_real(parameters, "gammaL");
    const real_type mv0 = dust2::r::read_real(parameters, "mv0");
    const real_type mum = dust2::r::read_real(parameters, "mum");
    const real_type foraging_time = dust2::r::read_real(parameters, "foraging_time");
    const real_type gonotrophic_cycle = dust2::r::read_real(parameters, "gonotrophic_cycle");
    const real_type betaL = dust2::r::read_real(parameters, "betaL");
    const real_type init_PL = dust2::r::read_real(parameters, "init_PL");
    const real_type init_LL = dust2::r::read_real(parameters, "init_LL");
    const real_type init_EL = dust2::r::read_real(parameters, "init_EL");
    const real_type max_irs_cov = dust2::r::read_real(parameters, "max_irs_cov");
    const real_type phi_indoors = dust2::r::read_real(parameters, "phi_indoors");
    const real_type max_itn_cov = dust2::r::read_real(parameters, "max_itn_cov");
    const real_type Q0 = dust2::r::read_real(parameters, "Q0");
    const real_type phi_bednets = dust2::r::read_real(parameters, "phi_bednets");
    const int num_int = dust2::r::read_int(parameters, "num_int");
    dim.cov_.set({static_cast<size_t>(4)});
    const real_type w1 = 1;
    dim.w_.set({static_cast<size_t>(4)});
    dim.yy_.set({static_cast<size_t>(4)});
    const real_type z1 = 0;
    dim.z_.set({static_cast<size_t>(4)});
    const int prev_dim = dust2::r::read_int(parameters, "prev_dim");
    const int inc_dim = dust2::r::read_int(parameters, "inc_dim");
    dim.daily_rain_input.set({static_cast<size_t>(n_days + 1)});
    dim.days.set({static_cast<size_t>(n_days + 1)});
    dim.age_rate.set({static_cast<size_t>(na)});
    dim.het_wt.set({static_cast<size_t>(nh)});
    dim.init_S.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.S.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.init_T.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.T.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.init_D.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.D.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.init_A.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.A.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.init_U.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.U.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.init_P.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.P.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.births.set({static_cast<size_t>(1), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.ST_rate.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.SD_rate.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.SA_rate.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.ST_trans.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.SD_trans.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.SA_trans.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.S_death.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.S_age.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.TP_trans.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.T_death.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.T_age.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.DA_trans.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.D_death.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.D_age.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.AT_rate.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.AD_rate.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.AU_trans.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.AT_trans.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.AD_trans.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.A_age.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.A_death.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.UA_rate.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.UD_rate.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.UT_rate.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.UA_trans.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.UD_trans.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.UT_trans.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.US_trans.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.U_age.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.U_death.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.PS_trans.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.P_death.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.P_age.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.FOI_lag.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.FOI_eq.set({static_cast<size_t>(na), static_cast<size_t>(nh)});
    dim.FOI_XL.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int), static_cast<size_t>(lag_rates)});
    dim.FOI.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.psi.set({static_cast<size_t>(na)});
    dim.zeta.set({static_cast<size_t>(nh)});
    dim.EIR.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.x_I.set({static_cast<size_t>(na)});
    dim.init_ICM.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.ICM.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.init_ICM_pre.set({static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.init_ICA.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.ICA.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.IC.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.init_IB.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.IB.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.init_ID.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.ID.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.phi.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.b.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.age_vector.set({static_cast<size_t>(na)});
    dim.fd.set({static_cast<size_t>(na)});
    dim.p_det.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.cA.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.FOIv.set({static_cast<size_t>(lag_ratesMos)});
    dim.FOIvijk.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.ince_delay.set({static_cast<size_t>(lag_ratesMos)});
    const real_type delayMos_use = delayMos;
    const real_type mum_use = mum;
    const real_type b_lambda = (gammaL * muLL / muEL - dEL / dLL + (gammaL - 1) * muLL * dEL);
    dim.irs_eff_cov_daily.set({static_cast<size_t>(n_days + 1)});
    dim.ss.set({static_cast<size_t>(n_days + 1)});
    dim.rs.set({static_cast<size_t>(n_days + 1)});
    dim.r_itn_daily.set({static_cast<size_t>(n_days + 1)});
    dim.s_itn_daily.set({static_cast<size_t>(n_days + 1)});
    dim.itn_eff_cov_daily.set({static_cast<size_t>(n_days + 1)});
    std::vector<real_type> cov_(dim.cov_.size);
    cov_[0] = (1 - max_itn_cov) * (1 - max_irs_cov);
    cov_[1] = max_itn_cov * (1 - max_irs_cov);
    cov_[2] = (1 - max_itn_cov) * max_irs_cov;
    cov_[3] = max_itn_cov * max_irs_cov;
    dim.cov.set({static_cast<size_t>(num_int)});
    dim.w.set({static_cast<size_t>(num_int)});
    dim.yy.set({static_cast<size_t>(num_int)});
    dim.z.set({static_cast<size_t>(num_int)});
    dim.zhi.set({static_cast<size_t>(num_int)});
    dim.whi.set({static_cast<size_t>(num_int)});
    dim.av_mosq.set({static_cast<size_t>(num_int)});
    dim.av_human.set({static_cast<size_t>(num_int)});
    dim.clin_inc.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.min_age_prev.set({static_cast<size_t>(prev_dim)});
    dim.max_age_prev.set({static_cast<size_t>(prev_dim)});
    dim.n_prev.set({static_cast<size_t>(prev_dim)});
    dim.detect_prev_full.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.detect_prev.set({static_cast<size_t>(prev_dim)});
    dim.n_ud_prev.set({static_cast<size_t>(prev_dim)});
    dim.n_ud_detect_prev.set({static_cast<size_t>(prev_dim)});
    dim.min_age_inc.set({static_cast<size_t>(inc_dim)});
    dim.max_age_inc.set({static_cast<size_t>(inc_dim)});
    dim.n_ud_inc.set({static_cast<size_t>(inc_dim)});
    dim.all.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.icm_pop.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.ica_pop.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.id_pop.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.ib_pop.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.ic_pop.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.all_deaths.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.all_eir.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.epsilon_0.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    dim.epsilon_0_no_int.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(1)});
    dim.epsilon_0_irs.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(3)});
    dim.epsilon_0_foi.set({static_cast<size_t>(na), static_cast<size_t>(nh), static_cast<size_t>(num_int)});
    std::vector<real_type> daily_rain_input(dim.daily_rain_input.size);
    dust2::r::read_real_array(parameters, dim.daily_rain_input, daily_rain_input.data(), "daily_rain_input", true);
    std::vector<real_type> days(dim.days.size);
    dust2::r::read_real_array(parameters, dim.days, days.data(), "days", true);
    std::vector<real_type> age_rate(dim.age_rate.size);
    dust2::r::read_real_array(parameters, dim.age_rate, age_rate.data(), "age_rate", true);
    std::vector<real_type> het_wt(dim.het_wt.size);
    dust2::r::read_real_array(parameters, dim.het_wt, het_wt.data(), "het_wt", true);
    std::vector<real_type> init_S(dim.init_S.size);
    dust2::r::read_real_array(parameters, dim.init_S, init_S.data(), "init_S", true);
    std::vector<real_type> init_T(dim.init_T.size);
    dust2::r::read_real_array(parameters, dim.init_T, init_T.data(), "init_T", true);
    std::vector<real_type> init_D(dim.init_D.size);
    dust2::r::read_real_array(parameters, dim.init_D, init_D.data(), "init_D", true);
    std::vector<real_type> init_A(dim.init_A.size);
    dust2::r::read_real_array(parameters, dim.init_A, init_A.data(), "init_A", true);
    std::vector<real_type> init_U(dim.init_U.size);
    dust2::r::read_real_array(parameters, dim.init_U, init_U.data(), "init_U", true);
    std::vector<real_type> init_P(dim.init_P.size);
    dust2::r::read_real_array(parameters, dim.init_P, init_P.data(), "init_P", true);
    std::vector<real_type> FOI_eq(dim.FOI_eq.size);
    dust2::r::read_real_array(parameters, dim.FOI_eq, FOI_eq.data(), "FOI_eq", true);
    std::vector<real_type> psi(dim.psi.size);
    dust2::r::read_real_array(parameters, dim.psi, psi.data(), "psi", true);
    std::vector<real_type> zeta(dim.zeta.size);
    dust2::r::read_real_array(parameters, dim.zeta, zeta.data(), "zeta", true);
    std::vector<real_type> x_I(dim.x_I.size);
    dust2::r::read_real_array(parameters, dim.x_I, x_I.data(), "x_I", true);
    std::vector<real_type> init_ICM(dim.init_ICM.size);
    dust2::r::read_real_array(parameters, dim.init_ICM, init_ICM.data(), "init_ICM", true);
    std::vector<real_type> init_ICA(dim.init_ICA.size);
    dust2::r::read_real_array(parameters, dim.init_ICA, init_ICA.data(), "init_ICA", true);
    std::vector<real_type> init_IB(dim.init_IB.size);
    dust2::r::read_real_array(parameters, dim.init_IB, init_IB.data(), "init_IB", true);
    std::vector<real_type> init_ID(dim.init_ID.size);
    dust2::r::read_real_array(parameters, dim.init_ID, init_ID.data(), "init_ID", true);
    std::vector<real_type> age_vector(dim.age_vector.size);
    dust2::r::read_real_array(parameters, dim.age_vector, age_vector.data(), "age_vector", true);
    const real_type p10 = monty::math::exp(-mum_use * foraging_time);
    const real_type p2 = monty::math::exp(-mum_use * gonotrophic_cycle);
    std::vector<real_type> irs_eff_cov_daily(dim.irs_eff_cov_daily.size);
    dust2::r::read_real_array(parameters, dim.irs_eff_cov_daily, irs_eff_cov_daily.data(), "irs_eff_cov_daily", true);
    std::vector<real_type> ss(dim.ss.size);
    dust2::r::read_real_array(parameters, dim.ss, ss.data(), "ss", true);
    std::vector<real_type> rs(dim.rs.size);
    dust2::r::read_real_array(parameters, dim.rs, rs.data(), "rs", true);
    std::vector<real_type> r_itn_daily(dim.r_itn_daily.size);
    dust2::r::read_real_array(parameters, dim.r_itn_daily, r_itn_daily.data(), "r_itn_daily", true);
    std::vector<real_type> s_itn_daily(dim.s_itn_daily.size);
    dust2::r::read_real_array(parameters, dim.s_itn_daily, s_itn_daily.data(), "s_itn_daily", true);
    std::vector<real_type> itn_eff_cov_daily(dim.itn_eff_cov_daily.size);
    dust2::r::read_real_array(parameters, dim.itn_eff_cov_daily, itn_eff_cov_daily.data(), "itn_eff_cov_daily", true);
    std::vector<real_type> cov(dim.cov.size);
    for (size_t i = 1; i <= dim.cov.size; ++i) {
      cov[i - 1] = cov_[i - 1];
    }
    std::vector<int> min_age_prev(dim.min_age_prev.size);
    dust2::r::read_int_array(parameters, dim.min_age_prev, min_age_prev.data(), "min_age_prev", true);
    std::vector<int> max_age_prev(dim.max_age_prev.size);
    dust2::r::read_int_array(parameters, dim.max_age_prev, max_age_prev.data(), "max_age_prev", true);
    std::vector<int> min_age_inc(dim.min_age_inc.size);
    dust2::r::read_int_array(parameters, dim.min_age_inc, min_age_inc.data(), "min_age_inc", true);
    std::vector<int> max_age_inc(dim.max_age_inc.size);
    dust2::r::read_int_array(parameters, dim.max_age_inc, max_age_inc.data(), "max_age_inc", true);
    std::vector<real_type> fd(dim.fd.size);
    for (size_t i = 1; i <= static_cast<size_t>(na); ++i) {
      fd[i - 1] = 1 - (1 - fD0) / (1 + monty::math::pow((age_vector[i - 1] / aD), gammaD));
    }
    const auto interpolate_rain_input = dust2::interpolate::InterpolateLinear(days, daily_rain_input, "days", "daily_rain_input");
    const auto interpolate_s_irs = dust2::interpolate::InterpolateLinear(days, ss, "days", "ss");
    const auto interpolate_r_irs = dust2::interpolate::InterpolateLinear(days, rs, "days", "rs");
    const auto interpolate_irs_eff_cov = dust2::interpolate::InterpolateLinear(days, irs_eff_cov_daily, "days", "irs_eff_cov_daily");
    const auto interpolate_r_itn = dust2::interpolate::InterpolateLinear(days, r_itn_daily, "days", "r_itn_daily");
    const auto interpolate_s_itn = dust2::interpolate::InterpolateLinear(days, s_itn_daily, "days", "s_itn_daily");
    const auto interpolate_itn_eff_cov = dust2::interpolate::InterpolateLinear(days, itn_eff_cov_daily, "days", "itn_eff_cov_daily");
    shared_state::odin_internals_type odin;
    odin.packing.state = dust2::packing{
      {"Sv", {}},
      {"Pv", {}},
      {"Iv", {}},
      {"mv", {}},
      {"total_M", {}},
      {"Sm_count", {}},
      {"Pm_count", {}},
      {"Im_count", {}},
      {"PL", {}},
      {"LL", {}},
      {"EL", {}},
      {"S_count", {}},
      {"T_count", {}},
      {"D_count", {}},
      {"A_count", {}},
      {"U_count", {}},
      {"P_count", {}},
      {"icm_mean", {}},
      {"ica_mean", {}},
      {"id_mean", {}},
      {"ib_mean", {}},
      {"ic_mean", {}},
      {"natural_deaths", {}},
      {"mu_mosq", {}},
      {"true_EIR_mean", {}},
      {"EIR_mean", {}},
      {"EIR_mean_no_int", {}},
      {"EIR_mean_IRS", {}},
      {"av_human_out", {}},
      {"av_out", {}},
      {"wh_out", {}},
      {"yy1_out", {}},
      {"yy2_out", {}},
      {"yy3_out", {}},
      {"w1_out", {}},
      {"w2_out", {}},
      {"w3_out", {}},
      {"w4_out", {}},
      {"z1_out", {}},
      {"z2_out", {}},
      {"z3_out", {}},
      {"z4_out", {}},
      {"wbar_out", {}},
      {"zbar_out", {}},
      {"FOI_mean", {}},
      {"FOIM", {}},
      {"lag_FOIv_out", {}},
      {"S", std::vector<size_t>(dim.S.dim.begin(), dim.S.dim.end())},
      {"T", std::vector<size_t>(dim.T.dim.begin(), dim.T.dim.end())},
      {"D", std::vector<size_t>(dim.D.dim.begin(), dim.D.dim.end())},
      {"A", std::vector<size_t>(dim.A.dim.begin(), dim.A.dim.end())},
      {"U", std::vector<size_t>(dim.U.dim.begin(), dim.U.dim.end())},
      {"P", std::vector<size_t>(dim.P.dim.begin(), dim.P.dim.end())},
      {"FOI_XL", std::vector<size_t>(dim.FOI_XL.dim.begin(), dim.FOI_XL.dim.end())},
      {"ICM", std::vector<size_t>(dim.ICM.dim.begin(), dim.ICM.dim.end())},
      {"ICA", std::vector<size_t>(dim.ICA.dim.begin(), dim.ICA.dim.end())},
      {"IB", std::vector<size_t>(dim.IB.dim.begin(), dim.IB.dim.end())},
      {"ID", std::vector<size_t>(dim.ID.dim.begin(), dim.ID.dim.end())},
      {"FOIv", std::vector<size_t>(dim.FOIv.dim.begin(), dim.FOIv.dim.end())},
      {"ince_delay", std::vector<size_t>(dim.ince_delay.dim.begin(), dim.ince_delay.dim.end())},
      {"n_ud_prev", std::vector<size_t>(dim.n_ud_prev.dim.begin(), dim.n_ud_prev.dim.end())},
      {"n_ud_detect_prev", std::vector<size_t>(dim.n_ud_detect_prev.dim.begin(), dim.n_ud_detect_prev.dim.end())},
      {"n_ud_inc", std::vector<size_t>(dim.n_ud_inc.dim.begin(), dim.n_ud_inc.dim.end())}
    };
    odin.packing.state.copy_offset(odin.offset.state.begin());
    return shared_state{odin, dim, n_days, na, nh, ft, eta, rA, rT, rD, rU, rP, dE, lag_rates, dCM, uCA, dCA, dB, uB, dID, uD, age20l, age20u, age_20_factor, PM, phi0, phi1, IC0, kC, b0, b1, kB, IB0, aD, fD0, gammaD, d1, ID0, kD, init_Sv, init_Pv, init_Iv, cU, cD, cT, gamma1, lag_ratesMos, FOIv_eq, omega, delayGam, delayMos, human_pop, dLL, dPL, dEL, muLL, muEL, muPL, gammaL, mv0, mum, foraging_time, gonotrophic_cycle, betaL, init_PL, init_LL, init_EL, max_irs_cov, phi_indoors, max_itn_cov, Q0, phi_bednets, num_int, w1, z1, prev_dim, inc_dim, delayMos_use, mum_use, b_lambda, cov_, daily_rain_input, days, age_rate, het_wt, init_S, init_T, init_D, init_A, init_U, init_P, FOI_eq, psi, zeta, x_I, init_ICM, init_ICA, init_IB, init_ID, age_vector, p10, p2, irs_eff_cov_daily, ss, rs, r_itn_daily, s_itn_daily, itn_eff_cov_daily, cov, min_age_prev, max_age_prev, min_age_inc, max_age_inc, fd, interpolate_rain_input, interpolate_s_irs, interpolate_r_irs, interpolate_irs_eff_cov, interpolate_r_itn, interpolate_s_itn, interpolate_itn_eff_cov};
  }
  static internal_state build_internal(const shared_state& shared) {
    std::vector<real_type> S_death(shared.dim.S_death.size);
    std::vector<real_type> TP_trans(shared.dim.TP_trans.size);
    std::vector<real_type> T_death(shared.dim.T_death.size);
    std::vector<real_type> DA_trans(shared.dim.DA_trans.size);
    std::vector<real_type> D_death(shared.dim.D_death.size);
    std::vector<real_type> AU_trans(shared.dim.AU_trans.size);
    std::vector<real_type> A_death(shared.dim.A_death.size);
    std::vector<real_type> US_trans(shared.dim.US_trans.size);
    std::vector<real_type> U_death(shared.dim.U_death.size);
    std::vector<real_type> PS_trans(shared.dim.PS_trans.size);
    std::vector<real_type> P_death(shared.dim.P_death.size);
    std::vector<real_type> FOI(shared.dim.FOI.size);
    std::vector<real_type> init_ICM_pre(shared.dim.init_ICM_pre.size);
    std::vector<real_type> IC(shared.dim.IC.size);
    std::vector<real_type> b(shared.dim.b.size);
    std::vector<real_type> all(shared.dim.all.size);
    std::vector<real_type> births(shared.dim.births.size);
    std::vector<real_type> S_age(shared.dim.S_age.size);
    std::vector<real_type> T_age(shared.dim.T_age.size);
    std::vector<real_type> D_age(shared.dim.D_age.size);
    std::vector<real_type> A_age(shared.dim.A_age.size);
    std::vector<real_type> U_age(shared.dim.U_age.size);
    std::vector<real_type> P_age(shared.dim.P_age.size);
    std::vector<real_type> phi(shared.dim.phi.size);
    std::vector<real_type> n_prev(shared.dim.n_prev.size);
    std::vector<real_type> icm_pop(shared.dim.icm_pop.size);
    std::vector<real_type> ica_pop(shared.dim.ica_pop.size);
    std::vector<real_type> id_pop(shared.dim.id_pop.size);
    std::vector<real_type> ib_pop(shared.dim.ib_pop.size);
    std::vector<real_type> ic_pop(shared.dim.ic_pop.size);
    std::vector<real_type> all_deaths(shared.dim.all_deaths.size);
    std::vector<real_type> epsilon_0_foi(shared.dim.epsilon_0_foi.size);
    std::vector<real_type> ST_rate(shared.dim.ST_rate.size);
    std::vector<real_type> SD_rate(shared.dim.SD_rate.size);
    std::vector<real_type> SA_rate(shared.dim.SA_rate.size);
    std::vector<real_type> AT_rate(shared.dim.AT_rate.size);
    std::vector<real_type> AD_rate(shared.dim.AD_rate.size);
    std::vector<real_type> UA_rate(shared.dim.UA_rate.size);
    std::vector<real_type> UD_rate(shared.dim.UD_rate.size);
    std::vector<real_type> UT_rate(shared.dim.UT_rate.size);
    std::vector<real_type> p_det(shared.dim.p_det.size);
    std::vector<real_type> ST_trans(shared.dim.ST_trans.size);
    std::vector<real_type> SD_trans(shared.dim.SD_trans.size);
    std::vector<real_type> SA_trans(shared.dim.SA_trans.size);
    std::vector<real_type> AT_trans(shared.dim.AT_trans.size);
    std::vector<real_type> AD_trans(shared.dim.AD_trans.size);
    std::vector<real_type> UA_trans(shared.dim.UA_trans.size);
    std::vector<real_type> UD_trans(shared.dim.UD_trans.size);
    std::vector<real_type> UT_trans(shared.dim.UT_trans.size);
    std::vector<real_type> cA(shared.dim.cA.size);
    std::vector<real_type> detect_prev_full(shared.dim.detect_prev_full.size);
    std::vector<real_type> w_(shared.dim.w_.size);
    std::vector<real_type> z_(shared.dim.z_.size);
    std::vector<real_type> clin_inc(shared.dim.clin_inc.size);
    std::vector<real_type> detect_prev(shared.dim.detect_prev.size);
    std::vector<real_type> w(shared.dim.w.size);
    std::vector<real_type> yy_(shared.dim.yy_.size);
    std::vector<real_type> z(shared.dim.z.size);
    std::vector<real_type> yy(shared.dim.yy.size);
    std::vector<real_type> zhi(shared.dim.zhi.size);
    std::vector<real_type> whi(shared.dim.whi.size);
    std::vector<real_type> av_mosq(shared.dim.av_mosq.size);
    std::vector<real_type> av_human(shared.dim.av_human.size);
    std::vector<real_type> EIR(shared.dim.EIR.size);
    std::vector<real_type> FOIvijk(shared.dim.FOIvijk.size);
    std::vector<real_type> FOI_lag(shared.dim.FOI_lag.size);
    std::vector<real_type> all_eir(shared.dim.all_eir.size);
    std::vector<real_type> epsilon_0(shared.dim.epsilon_0.size);
    std::vector<real_type> epsilon_0_no_int(shared.dim.epsilon_0_no_int.size);
    std::vector<real_type> epsilon_0_irs(shared.dim.epsilon_0_irs.size);
    return internal_state{S_death, TP_trans, T_death, DA_trans, D_death, AU_trans, A_death, US_trans, U_death, PS_trans, P_death, FOI, init_ICM_pre, IC, b, all, births, S_age, T_age, D_age, A_age, U_age, P_age, phi, n_prev, icm_pop, ica_pop, id_pop, ib_pop, ic_pop, all_deaths, epsilon_0_foi, ST_rate, SD_rate, SA_rate, AT_rate, AD_rate, UA_rate, UD_rate, UT_rate, p_det, ST_trans, SD_trans, SA_trans, AT_trans, AD_trans, UA_trans, UD_trans, UT_trans, cA, detect_prev_full, w_, z_, clin_inc, detect_prev, w, yy_, z, yy, zhi, whi, av_mosq, av_human, EIR, FOIvijk, FOI_lag, all_eir, epsilon_0, epsilon_0_no_int, epsilon_0_irs};
  }
  static void update_shared(cpp11::list parameters, shared_state& shared) {
    shared.ft = dust2::r::read_real(parameters, "ft", shared.ft);
    shared.eta = dust2::r::read_real(parameters, "eta", shared.eta);
    shared.rA = dust2::r::read_real(parameters, "rA", shared.rA);
    shared.rT = dust2::r::read_real(parameters, "rT", shared.rT);
    shared.rD = dust2::r::read_real(parameters, "rD", shared.rD);
    shared.rU = dust2::r::read_real(parameters, "rU", shared.rU);
    shared.rP = dust2::r::read_real(parameters, "rP", shared.rP);
    shared.dE = dust2::r::read_real(parameters, "dE", shared.dE);
    shared.dCM = dust2::r::read_real(parameters, "dCM", shared.dCM);
    shared.uCA = dust2::r::read_real(parameters, "uCA", shared.uCA);
    shared.dCA = dust2::r::read_real(parameters, "dCA", shared.dCA);
    shared.dB = dust2::r::read_real(parameters, "dB", shared.dB);
    shared.uB = dust2::r::read_real(parameters, "uB", shared.uB);
    shared.dID = dust2::r::read_real(parameters, "dID", shared.dID);
    shared.uD = dust2::r::read_real(parameters, "uD", shared.uD);
    shared.age20l = dust2::r::read_int(parameters, "age20l", shared.age20l);
    shared.age20u = dust2::r::read_int(parameters, "age20u", shared.age20u);
    shared.age_20_factor = dust2::r::read_real(parameters, "age_20_factor", shared.age_20_factor);
    shared.PM = dust2::r::read_real(parameters, "PM", shared.PM);
    shared.phi0 = dust2::r::read_real(parameters, "phi0", shared.phi0);
    shared.phi1 = dust2::r::read_real(parameters, "phi1", shared.phi1);
    shared.IC0 = dust2::r::read_real(parameters, "IC0", shared.IC0);
    shared.kC = dust2::r::read_real(parameters, "kC", shared.kC);
    shared.b0 = dust2::r::read_real(parameters, "b0", shared.b0);
    shared.b1 = dust2::r::read_real(parameters, "b1", shared.b1);
    shared.kB = dust2::r::read_real(parameters, "kB", shared.kB);
    shared.IB0 = dust2::r::read_real(parameters, "IB0", shared.IB0);
    shared.aD = dust2::r::read_real(parameters, "aD", shared.aD);
    shared.fD0 = dust2::r::read_real(parameters, "fD0", shared.fD0);
    shared.gammaD = dust2::r::read_real(parameters, "gammaD", shared.gammaD);
    shared.d1 = dust2::r::read_real(parameters, "d1", shared.d1);
    shared.ID0 = dust2::r::read_real(parameters, "ID0", shared.ID0);
    shared.kD = dust2::r::read_real(parameters, "kD", shared.kD);
    shared.init_Sv = dust2::r::read_real(parameters, "init_Sv", shared.init_Sv);
    shared.init_Pv = dust2::r::read_real(parameters, "init_Pv", shared.init_Pv);
    shared.init_Iv = dust2::r::read_real(parameters, "init_Iv", shared.init_Iv);
    shared.cU = dust2::r::read_real(parameters, "cU", shared.cU);
    shared.cD = dust2::r::read_real(parameters, "cD", shared.cD);
    shared.cT = dust2::r::read_real(parameters, "cT", shared.cT);
    shared.gamma1 = dust2::r::read_real(parameters, "gamma1", shared.gamma1);
    shared.FOIv_eq = dust2::r::read_real(parameters, "FOIv_eq", shared.FOIv_eq);
    shared.omega = dust2::r::read_real(parameters, "omega", shared.omega);
    shared.delayGam = dust2::r::read_real(parameters, "delayGam", shared.delayGam);
    shared.delayMos = dust2::r::read_real(parameters, "delayMos", shared.delayMos);
    shared.human_pop = dust2::r::read_real(parameters, "human_pop", shared.human_pop);
    shared.dLL = dust2::r::read_real(parameters, "dLL", shared.dLL);
    shared.dPL = dust2::r::read_real(parameters, "dPL", shared.dPL);
    shared.dEL = dust2::r::read_real(parameters, "dEL", shared.dEL);
    shared.muLL = dust2::r::read_real(parameters, "muLL", shared.muLL);
    shared.muEL = dust2::r::read_real(parameters, "muEL", shared.muEL);
    shared.muPL = dust2::r::read_real(parameters, "muPL", shared.muPL);
    shared.gammaL = dust2::r::read_real(parameters, "gammaL", shared.gammaL);
    shared.mv0 = dust2::r::read_real(parameters, "mv0", shared.mv0);
    shared.mum = dust2::r::read_real(parameters, "mum", shared.mum);
    shared.foraging_time = dust2::r::read_real(parameters, "foraging_time", shared.foraging_time);
    shared.gonotrophic_cycle = dust2::r::read_real(parameters, "gonotrophic_cycle", shared.gonotrophic_cycle);
    shared.betaL = dust2::r::read_real(parameters, "betaL", shared.betaL);
    shared.init_PL = dust2::r::read_real(parameters, "init_PL", shared.init_PL);
    shared.init_LL = dust2::r::read_real(parameters, "init_LL", shared.init_LL);
    shared.init_EL = dust2::r::read_real(parameters, "init_EL", shared.init_EL);
    shared.max_irs_cov = dust2::r::read_real(parameters, "max_irs_cov", shared.max_irs_cov);
    shared.phi_indoors = dust2::r::read_real(parameters, "phi_indoors", shared.phi_indoors);
    shared.max_itn_cov = dust2::r::read_real(parameters, "max_itn_cov", shared.max_itn_cov);
    shared.Q0 = dust2::r::read_real(parameters, "Q0", shared.Q0);
    shared.phi_bednets = dust2::r::read_real(parameters, "phi_bednets", shared.phi_bednets);
    shared.delayMos_use = shared.delayMos;
    shared.mum_use = shared.mum;
    shared.b_lambda = (shared.gammaL * shared.muLL / shared.muEL - shared.dEL / shared.dLL + (shared.gammaL - 1) * shared.muLL * shared.dEL);
    shared.cov_[0] = (1 - shared.max_itn_cov) * (1 - shared.max_irs_cov);
    shared.cov_[1] = shared.max_itn_cov * (1 - shared.max_irs_cov);
    shared.cov_[2] = (1 - shared.max_itn_cov) * shared.max_irs_cov;
    shared.cov_[3] = shared.max_itn_cov * shared.max_irs_cov;
    dust2::r::read_real_array(parameters, shared.dim.daily_rain_input, shared.daily_rain_input.data(), "daily_rain_input", false);
    dust2::r::read_real_array(parameters, shared.dim.days, shared.days.data(), "days", false);
    dust2::r::read_real_array(parameters, shared.dim.age_rate, shared.age_rate.data(), "age_rate", false);
    dust2::r::read_real_array(parameters, shared.dim.het_wt, shared.het_wt.data(), "het_wt", false);
    dust2::r::read_real_array(parameters, shared.dim.init_S, shared.init_S.data(), "init_S", false);
    dust2::r::read_real_array(parameters, shared.dim.init_T, shared.init_T.data(), "init_T", false);
    dust2::r::read_real_array(parameters, shared.dim.init_D, shared.init_D.data(), "init_D", false);
    dust2::r::read_real_array(parameters, shared.dim.init_A, shared.init_A.data(), "init_A", false);
    dust2::r::read_real_array(parameters, shared.dim.init_U, shared.init_U.data(), "init_U", false);
    dust2::r::read_real_array(parameters, shared.dim.init_P, shared.init_P.data(), "init_P", false);
    dust2::r::read_real_array(parameters, shared.dim.FOI_eq, shared.FOI_eq.data(), "FOI_eq", false);
    dust2::r::read_real_array(parameters, shared.dim.psi, shared.psi.data(), "psi", false);
    dust2::r::read_real_array(parameters, shared.dim.zeta, shared.zeta.data(), "zeta", false);
    dust2::r::read_real_array(parameters, shared.dim.x_I, shared.x_I.data(), "x_I", false);
    dust2::r::read_real_array(parameters, shared.dim.init_ICM, shared.init_ICM.data(), "init_ICM", false);
    dust2::r::read_real_array(parameters, shared.dim.init_ICA, shared.init_ICA.data(), "init_ICA", false);
    dust2::r::read_real_array(parameters, shared.dim.init_IB, shared.init_IB.data(), "init_IB", false);
    dust2::r::read_real_array(parameters, shared.dim.init_ID, shared.init_ID.data(), "init_ID", false);
    dust2::r::read_real_array(parameters, shared.dim.age_vector, shared.age_vector.data(), "age_vector", false);
    shared.p10 = monty::math::exp(-shared.mum_use * shared.foraging_time);
    shared.p2 = monty::math::exp(-shared.mum_use * shared.gonotrophic_cycle);
    dust2::r::read_real_array(parameters, shared.dim.irs_eff_cov_daily, shared.irs_eff_cov_daily.data(), "irs_eff_cov_daily", false);
    dust2::r::read_real_array(parameters, shared.dim.ss, shared.ss.data(), "ss", false);
    dust2::r::read_real_array(parameters, shared.dim.rs, shared.rs.data(), "rs", false);
    dust2::r::read_real_array(parameters, shared.dim.r_itn_daily, shared.r_itn_daily.data(), "r_itn_daily", false);
    dust2::r::read_real_array(parameters, shared.dim.s_itn_daily, shared.s_itn_daily.data(), "s_itn_daily", false);
    dust2::r::read_real_array(parameters, shared.dim.itn_eff_cov_daily, shared.itn_eff_cov_daily.data(), "itn_eff_cov_daily", false);
    for (size_t i = 1; i <= shared.dim.cov.size; ++i) {
      shared.cov[i - 1] = shared.cov_[i - 1];
    }
    dust2::r::read_int_array(parameters, shared.dim.min_age_prev, shared.min_age_prev.data(), "min_age_prev", false);
    dust2::r::read_int_array(parameters, shared.dim.max_age_prev, shared.max_age_prev.data(), "max_age_prev", false);
    dust2::r::read_int_array(parameters, shared.dim.min_age_inc, shared.min_age_inc.data(), "min_age_inc", false);
    dust2::r::read_int_array(parameters, shared.dim.max_age_inc, shared.max_age_inc.data(), "max_age_inc", false);
    for (size_t i = 1; i <= static_cast<size_t>(shared.na); ++i) {
      shared.fd[i - 1] = 1 - (1 - shared.fD0) / (1 + monty::math::pow((shared.age_vector[i - 1] / shared.aD), shared.gammaD));
    }
    const auto interpolate_rain_input = dust2::interpolate::InterpolateLinear(shared.days, shared.daily_rain_input, "days", "daily_rain_input");
    const auto interpolate_s_irs = dust2::interpolate::InterpolateLinear(shared.days, shared.ss, "days", "ss");
    const auto interpolate_r_irs = dust2::interpolate::InterpolateLinear(shared.days, shared.rs, "days", "rs");
    const auto interpolate_irs_eff_cov = dust2::interpolate::InterpolateLinear(shared.days, shared.irs_eff_cov_daily, "days", "irs_eff_cov_daily");
    const auto interpolate_r_itn = dust2::interpolate::InterpolateLinear(shared.days, shared.r_itn_daily, "days", "r_itn_daily");
    const auto interpolate_s_itn = dust2::interpolate::InterpolateLinear(shared.days, shared.s_itn_daily, "days", "s_itn_daily");
    const auto interpolate_itn_eff_cov = dust2::interpolate::InterpolateLinear(shared.days, shared.itn_eff_cov_daily, "days", "itn_eff_cov_daily");
  }
  static void update_internal(const shared_state& shared, internal_state& internal) {
  }
  static void initial(real_type time, const shared_state& shared, internal_state& internal, rng_state_type& rng_state, real_type* state) {
    for (size_t i = 1; i <= shared.dim.S.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.S.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.S.dim[2]; ++k) {
          state[i - 1 + (j - 1) * shared.dim.S.mult[1] + (k - 1) * shared.dim.S.mult[2] + 47] = shared.init_S[i - 1 + (j - 1) * shared.dim.init_S.mult[1] + (k - 1) * shared.dim.init_S.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.T.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.T.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.T.dim[2]; ++k) {
          state[i - 1 + (j - 1) * shared.dim.T.mult[1] + (k - 1) * shared.dim.T.mult[2] + shared.odin.offset.state[48]] = shared.init_T[i - 1 + (j - 1) * shared.dim.init_T.mult[1] + (k - 1) * shared.dim.init_T.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.D.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.D.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.D.dim[2]; ++k) {
          state[i - 1 + (j - 1) * shared.dim.D.mult[1] + (k - 1) * shared.dim.D.mult[2] + shared.odin.offset.state[49]] = shared.init_D[i - 1 + (j - 1) * shared.dim.init_D.mult[1] + (k - 1) * shared.dim.init_D.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.A.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.A.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.A.dim[2]; ++k) {
          state[i - 1 + (j - 1) * shared.dim.A.mult[1] + (k - 1) * shared.dim.A.mult[2] + shared.odin.offset.state[50]] = shared.init_A[i - 1 + (j - 1) * shared.dim.init_A.mult[1] + (k - 1) * shared.dim.init_A.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.U.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.U.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.U.dim[2]; ++k) {
          state[i - 1 + (j - 1) * shared.dim.U.mult[1] + (k - 1) * shared.dim.U.mult[2] + shared.odin.offset.state[51]] = shared.init_U[i - 1 + (j - 1) * shared.dim.init_U.mult[1] + (k - 1) * shared.dim.init_U.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.P.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.P.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.P.dim[2]; ++k) {
          state[i - 1 + (j - 1) * shared.dim.P.mult[1] + (k - 1) * shared.dim.P.mult[2] + shared.odin.offset.state[52]] = shared.init_P[i - 1 + (j - 1) * shared.dim.init_P.mult[1] + (k - 1) * shared.dim.init_P.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.FOI_XL.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.FOI_XL.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.FOI_XL.dim[2]; ++k) {
          for (size_t l = 1; l <= shared.dim.FOI_XL.dim[3]; ++l) {
            state[i - 1 + (j - 1) * shared.dim.FOI_XL.mult[1] + (k - 1) * shared.dim.FOI_XL.mult[2] + (l - 1) * shared.dim.FOI_XL.mult[3] + shared.odin.offset.state[53]] = shared.FOI_eq[i - 1 + (j - 1) * shared.dim.FOI_eq.mult[1]];
          }
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.ICM.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.ICM.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.ICM.dim[2]; ++k) {
          state[i - 1 + (j - 1) * shared.dim.ICM.mult[1] + (k - 1) * shared.dim.ICM.mult[2] + shared.odin.offset.state[54]] = shared.init_ICM[i - 1 + (j - 1) * shared.dim.init_ICM.mult[1] + (k - 1) * shared.dim.init_ICM.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.ICA.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.ICA.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.ICA.dim[2]; ++k) {
          state[i - 1 + (j - 1) * shared.dim.ICA.mult[1] + (k - 1) * shared.dim.ICA.mult[2] + shared.odin.offset.state[55]] = shared.init_ICA[i - 1 + (j - 1) * shared.dim.init_ICA.mult[1] + (k - 1) * shared.dim.init_ICA.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.IB.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.IB.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.IB.dim[2]; ++k) {
          state[i - 1 + (j - 1) * shared.dim.IB.mult[1] + (k - 1) * shared.dim.IB.mult[2] + shared.odin.offset.state[56]] = shared.init_IB[i - 1 + (j - 1) * shared.dim.init_IB.mult[1] + (k - 1) * shared.dim.init_IB.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.ID.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.ID.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.ID.dim[2]; ++k) {
          state[i - 1 + (j - 1) * shared.dim.ID.mult[1] + (k - 1) * shared.dim.ID.mult[2] + shared.odin.offset.state[57]] = shared.init_ID[i - 1 + (j - 1) * shared.dim.init_ID.mult[1] + (k - 1) * shared.dim.init_ID.mult[2]];
        }
      }
    }
    state[0] = shared.init_Sv * shared.mv0;
    state[1] = shared.init_Pv * shared.mv0;
    state[2] = shared.init_Iv * shared.mv0;
    for (size_t i = 1; i <= shared.dim.FOIv.size; ++i) {
      state[i - 1 + shared.odin.offset.state[58]] = shared.FOIv_eq * shared.delayGam / shared.lag_ratesMos;
    }
    for (size_t i = 1; i <= shared.dim.ince_delay.size; ++i) {
      state[i - 1 + shared.odin.offset.state[59]] = shared.FOIv_eq * shared.init_Sv * shared.mv0 * shared.delayMos_use / shared.lag_ratesMos;
    }
    state[3] = 0;
    state[4] = 0;
    state[5] = 0;
    state[6] = 0;
    state[7] = 0;
    state[8] = shared.init_PL;
    state[9] = shared.init_LL;
    state[10] = shared.init_EL;
    for (size_t i = 1; i <= shared.dim.n_ud_prev.size; ++i) {
      state[i - 1 + shared.odin.offset.state[60]] = shared.min_age_prev[i - 1];
    }
    for (size_t i = 1; i <= shared.dim.n_ud_detect_prev.size; ++i) {
      state[i - 1 + shared.odin.offset.state[61]] = shared.min_age_prev[i - 1];
    }
    for (size_t i = 1; i <= shared.dim.n_ud_inc.size; ++i) {
      state[i - 1 + shared.odin.offset.state[62]] = shared.min_age_inc[i - 1];
    }
    state[11] = 0;
    state[12] = 0;
    state[13] = 0;
    state[14] = 0;
    state[15] = 0;
    state[16] = 0;
    state[17] = 0;
    state[18] = 0;
    state[19] = 0;
    state[20] = 0;
    state[21] = 0;
    state[22] = 0;
    state[23] = 0;
    state[24] = 0;
    state[25] = 0;
    state[26] = 0;
    state[27] = 0;
    state[28] = 0;
    state[29] = 0;
    state[30] = 0;
    state[31] = 0;
    state[32] = 0;
    state[33] = 0;
    state[34] = 0;
    state[35] = 0;
    state[36] = 0;
    state[37] = 0;
    state[38] = 0;
    state[39] = 0;
    state[40] = 0;
    state[41] = 0;
    state[42] = 0;
    state[43] = 0;
    state[44] = 0;
    state[45] = 0;
    state[46] = 0;
  }
  static void update(real_type time, real_type dt, const real_type* state, const shared_state& shared, internal_state& internal, rng_state_type& rng_state, real_type* state_next) {
    const auto * S = state + 47;
    const auto * T = state + shared.odin.offset.state[48];
    const auto * D = state + shared.odin.offset.state[49];
    const auto * A = state + shared.odin.offset.state[50];
    const auto * U = state + shared.odin.offset.state[51];
    const auto * P = state + shared.odin.offset.state[52];
    const auto * FOI_XL = state + shared.odin.offset.state[53];
    const auto * ICM = state + shared.odin.offset.state[54];
    const auto * ICA = state + shared.odin.offset.state[55];
    const auto * IB = state + shared.odin.offset.state[56];
    const auto * ID = state + shared.odin.offset.state[57];
    const auto Sv = state[0];
    const auto Pv = state[1];
    const auto Iv = state[2];
    const auto * FOIv = state + shared.odin.offset.state[58];
    const auto * ince_delay = state + shared.odin.offset.state[59];
    const auto mv = state[3];
    const auto PL = state[8];
    const auto LL = state[9];
    const auto EL = state[10];
    const real_type Sh = dust2::array::sum<real_type>(S, shared.dim.S);
    const real_type Th = dust2::array::sum<real_type>(T, shared.dim.T);
    const real_type Dh = dust2::array::sum<real_type>(D, shared.dim.D);
    const real_type Ah = dust2::array::sum<real_type>(A, shared.dim.A);
    const real_type Uh = dust2::array::sum<real_type>(U, shared.dim.U);
    const real_type Ph = dust2::array::sum<real_type>(P, shared.dim.P);
    const real_type ince = FOIv[shared.lag_ratesMos - 1] * shared.lag_ratesMos / shared.delayGam * Sv;
    const real_type betaa = static_cast<real_type>(0.5) * PL / shared.dPL;
    const real_type H = Sh + Th + Dh + Ah + Uh + Ph;
    for (size_t i = 1; i <= shared.dim.S_death.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.S_death.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.S_death.dim[2]; ++k) {
          internal.S_death[i - 1 + (j - 1) * shared.dim.S_death.mult[1] + (k - 1) * shared.dim.S_death.mult[2]] = (S[i - 1 + (j - 1) * shared.dim.S.mult[1] + (k - 1) * shared.dim.S.mult[2]] * dt * shared.eta < 0 ? 0 : S[i - 1 + (j - 1) * shared.dim.S.mult[1] + (k - 1) * shared.dim.S.mult[2]] * dt * shared.eta);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.TP_trans.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.TP_trans.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.TP_trans.dim[2]; ++k) {
          internal.TP_trans[i - 1 + (j - 1) * shared.dim.TP_trans.mult[1] + (k - 1) * shared.dim.TP_trans.mult[2]] = (T[i - 1 + (j - 1) * shared.dim.T.mult[1] + (k - 1) * shared.dim.T.mult[2]] * dt * shared.rT < 0 ? 0 : T[i - 1 + (j - 1) * shared.dim.T.mult[1] + (k - 1) * shared.dim.T.mult[2]] * dt * shared.rT);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.T_death.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.T_death.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.T_death.dim[2]; ++k) {
          internal.T_death[i - 1 + (j - 1) * shared.dim.T_death.mult[1] + (k - 1) * shared.dim.T_death.mult[2]] = (T[i - 1 + (j - 1) * shared.dim.T.mult[1] + (k - 1) * shared.dim.T.mult[2]] * dt * shared.eta < 0 ? 0 : T[i - 1 + (j - 1) * shared.dim.T.mult[1] + (k - 1) * shared.dim.T.mult[2]] * dt * shared.eta);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.DA_trans.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.DA_trans.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.DA_trans.dim[2]; ++k) {
          internal.DA_trans[i - 1 + (j - 1) * shared.dim.DA_trans.mult[1] + (k - 1) * shared.dim.DA_trans.mult[2]] = (D[i - 1 + (j - 1) * shared.dim.D.mult[1] + (k - 1) * shared.dim.D.mult[2]] * dt * shared.rD < 0 ? 0 : D[i - 1 + (j - 1) * shared.dim.D.mult[1] + (k - 1) * shared.dim.D.mult[2]] * dt * shared.rD);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.D_death.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.D_death.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.D_death.dim[2]; ++k) {
          internal.D_death[i - 1 + (j - 1) * shared.dim.D_death.mult[1] + (k - 1) * shared.dim.D_death.mult[2]] = (D[i - 1 + (j - 1) * shared.dim.D.mult[1] + (k - 1) * shared.dim.D.mult[2]] * dt * shared.eta < 0 ? 0 : D[i - 1 + (j - 1) * shared.dim.D.mult[1] + (k - 1) * shared.dim.D.mult[2]] * dt * shared.eta);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.AU_trans.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.AU_trans.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.AU_trans.dim[2]; ++k) {
          internal.AU_trans[i - 1 + (j - 1) * shared.dim.AU_trans.mult[1] + (k - 1) * shared.dim.AU_trans.mult[2]] = (A[i - 1 + (j - 1) * shared.dim.A.mult[1] + (k - 1) * shared.dim.A.mult[2]] * dt * shared.rA < 0 ? 0 : A[i - 1 + (j - 1) * shared.dim.A.mult[1] + (k - 1) * shared.dim.A.mult[2]] * dt * shared.rA);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.A_death.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.A_death.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.A_death.dim[2]; ++k) {
          internal.A_death[i - 1 + (j - 1) * shared.dim.A_death.mult[1] + (k - 1) * shared.dim.A_death.mult[2]] = (A[i - 1 + (j - 1) * shared.dim.A.mult[1] + (k - 1) * shared.dim.A.mult[2]] * dt * shared.eta < 0 ? 0 : A[i - 1 + (j - 1) * shared.dim.A.mult[1] + (k - 1) * shared.dim.A.mult[2]] * dt * shared.eta);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.US_trans.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.US_trans.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.US_trans.dim[2]; ++k) {
          internal.US_trans[i - 1 + (j - 1) * shared.dim.US_trans.mult[1] + (k - 1) * shared.dim.US_trans.mult[2]] = (U[i - 1 + (j - 1) * shared.dim.U.mult[1] + (k - 1) * shared.dim.U.mult[2]] * dt * shared.rU < 0 ? 0 : U[i - 1 + (j - 1) * shared.dim.U.mult[1] + (k - 1) * shared.dim.U.mult[2]] * dt * shared.rU);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.U_death.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.U_death.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.U_death.dim[2]; ++k) {
          internal.U_death[i - 1 + (j - 1) * shared.dim.U_death.mult[1] + (k - 1) * shared.dim.U_death.mult[2]] = (U[i - 1 + (j - 1) * shared.dim.U.mult[1] + (k - 1) * shared.dim.U.mult[2]] * dt * shared.eta < 0 ? 0 : U[i - 1 + (j - 1) * shared.dim.U.mult[1] + (k - 1) * shared.dim.U.mult[2]] * dt * shared.eta);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.PS_trans.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.PS_trans.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.PS_trans.dim[2]; ++k) {
          internal.PS_trans[i - 1 + (j - 1) * shared.dim.PS_trans.mult[1] + (k - 1) * shared.dim.PS_trans.mult[2]] = (P[i - 1 + (j - 1) * shared.dim.P.mult[1] + (k - 1) * shared.dim.P.mult[2]] * dt * shared.rP < 0 ? 0 : P[i - 1 + (j - 1) * shared.dim.P.mult[1] + (k - 1) * shared.dim.P.mult[2]] * dt * shared.rP);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.P_death.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.P_death.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.P_death.dim[2]; ++k) {
          internal.P_death[i - 1 + (j - 1) * shared.dim.P_death.mult[1] + (k - 1) * shared.dim.P_death.mult[2]] = (P[i - 1 + (j - 1) * shared.dim.P.mult[1] + (k - 1) * shared.dim.P.mult[2]] * dt * shared.eta < 0 ? 0 : P[i - 1 + (j - 1) * shared.dim.P.mult[1] + (k - 1) * shared.dim.P.mult[2]] * dt * shared.eta);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.FOI.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.FOI.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.FOI.dim[2]; ++k) {
          internal.FOI[i - 1 + (j - 1) * shared.dim.FOI.mult[1] + (k - 1) * shared.dim.FOI.mult[2]] = FOI_XL[i - 1 + (j - 1) * shared.dim.FOI_XL.mult[1] + (k - 1) * shared.dim.FOI_XL.mult[2] + (shared.lag_rates - 1) * shared.dim.FOI_XL.mult[3]];
        }
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.nh); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.num_int); ++j) {
        internal.init_ICM_pre[i - 1 + (j - 1) * shared.dim.init_ICM_pre.mult[1]] = shared.PM * (ICA[shared.age20l - 1 + (i - 1) * shared.dim.ICA.mult[1] + (j - 1) * shared.dim.ICA.mult[2]] + shared.age_20_factor * (ICA[shared.age20u - 1 + (i - 1) * shared.dim.ICA.mult[1] + (j - 1) * shared.dim.ICA.mult[2]] - ICA[shared.age20l - 1 + (i - 1) * shared.dim.ICA.mult[1] + (j - 1) * shared.dim.ICA.mult[2]]));
      }
    }
    for (size_t i = 1; i <= shared.dim.IC.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.IC.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.IC.dim[2]; ++k) {
          internal.IC[i - 1 + (j - 1) * shared.dim.IC.mult[1] + (k - 1) * shared.dim.IC.mult[2]] = ICM[i - 1 + (j - 1) * shared.dim.ICM.mult[1] + (k - 1) * shared.dim.ICM.mult[2]] + ICA[i - 1 + (j - 1) * shared.dim.ICA.mult[1] + (k - 1) * shared.dim.ICA.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.na); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.nh); ++j) {
        for (size_t k = 1; k <= static_cast<size_t>(shared.num_int); ++k) {
          internal.b[i - 1 + (j - 1) * shared.dim.b.mult[1] + (k - 1) * shared.dim.b.mult[2]] = shared.b0 * ((1 - shared.b1) / (1 + monty::math::pow((IB[i - 1 + (j - 1) * shared.dim.IB.mult[1] + (k - 1) * shared.dim.IB.mult[2]] / shared.IB0), shared.kB)) + shared.b1);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.all.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.all.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.all.dim[2]; ++k) {
          internal.all[i - 1 + (j - 1) * shared.dim.all.mult[1] + (k - 1) * shared.dim.all.mult[2]] = S[i - 1 + (j - 1) * shared.dim.S.mult[1] + (k - 1) * shared.dim.S.mult[2]] + T[i - 1 + (j - 1) * shared.dim.T.mult[1] + (k - 1) * shared.dim.T.mult[2]] + D[i - 1 + (j - 1) * shared.dim.D.mult[1] + (k - 1) * shared.dim.D.mult[2]] + A[i - 1 + (j - 1) * shared.dim.A.mult[1] + (k - 1) * shared.dim.A.mult[2]] + U[i - 1 + (j - 1) * shared.dim.U.mult[1] + (k - 1) * shared.dim.U.mult[2]] + P[i - 1 + (j - 1) * shared.dim.P.mult[1] + (k - 1) * shared.dim.P.mult[2]];
        }
      }
    }
    for (size_t j = 1; j <= shared.dim.births.dim[1]; ++j) {
      for (size_t k = 1; k <= shared.dim.births.dim[2]; ++k) {
        internal.births[(j - 1) * shared.dim.births.mult[1] + (k - 1) * shared.dim.births.mult[2]] = H * dt * shared.cov[k - 1] * shared.eta * shared.het_wt[j - 1];
      }
    }
    for (size_t i = 1; i <= shared.dim.S_age.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.S_age.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.S_age.dim[2]; ++k) {
          internal.S_age[i - 1 + (j - 1) * shared.dim.S_age.mult[1] + (k - 1) * shared.dim.S_age.mult[2]] = (S[i - 1 + (j - 1) * shared.dim.S.mult[1] + (k - 1) * shared.dim.S.mult[2]] * dt * shared.age_rate[i - 1] < 0 ? 0 : S[i - 1 + (j - 1) * shared.dim.S.mult[1] + (k - 1) * shared.dim.S.mult[2]] * dt * shared.age_rate[i - 1]);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.T_age.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.T_age.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.T_age.dim[2]; ++k) {
          internal.T_age[i - 1 + (j - 1) * shared.dim.T_age.mult[1] + (k - 1) * shared.dim.T_age.mult[2]] = (T[i - 1 + (j - 1) * shared.dim.T.mult[1] + (k - 1) * shared.dim.T.mult[2]] * dt * shared.age_rate[i - 1] < 0 ? 0 : T[i - 1 + (j - 1) * shared.dim.T.mult[1] + (k - 1) * shared.dim.T.mult[2]] * dt * shared.age_rate[i - 1]);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.D_age.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.D_age.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.D_age.dim[2]; ++k) {
          internal.D_age[i - 1 + (j - 1) * shared.dim.D_age.mult[1] + (k - 1) * shared.dim.D_age.mult[2]] = (D[i - 1 + (j - 1) * shared.dim.D.mult[1] + (k - 1) * shared.dim.D.mult[2]] * dt * shared.age_rate[i - 1] < 0 ? 0 : D[i - 1 + (j - 1) * shared.dim.D.mult[1] + (k - 1) * shared.dim.D.mult[2]] * dt * shared.age_rate[i - 1]);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.A_age.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.A_age.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.A_age.dim[2]; ++k) {
          internal.A_age[i - 1 + (j - 1) * shared.dim.A_age.mult[1] + (k - 1) * shared.dim.A_age.mult[2]] = (A[i - 1 + (j - 1) * shared.dim.A.mult[1] + (k - 1) * shared.dim.A.mult[2]] * dt * shared.age_rate[i - 1] < 0 ? 0 : A[i - 1 + (j - 1) * shared.dim.A.mult[1] + (k - 1) * shared.dim.A.mult[2]] * dt * shared.age_rate[i - 1]);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.U_age.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.U_age.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.U_age.dim[2]; ++k) {
          internal.U_age[i - 1 + (j - 1) * shared.dim.U_age.mult[1] + (k - 1) * shared.dim.U_age.mult[2]] = (U[i - 1 + (j - 1) * shared.dim.U.mult[1] + (k - 1) * shared.dim.U.mult[2]] * dt * shared.age_rate[i - 1] < 0 ? 0 : U[i - 1 + (j - 1) * shared.dim.U.mult[1] + (k - 1) * shared.dim.U.mult[2]] * dt * shared.age_rate[i - 1]);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.P_age.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.P_age.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.P_age.dim[2]; ++k) {
          internal.P_age[i - 1 + (j - 1) * shared.dim.P_age.mult[1] + (k - 1) * shared.dim.P_age.mult[2]] = (P[i - 1 + (j - 1) * shared.dim.P.mult[1] + (k - 1) * shared.dim.P.mult[2]] * dt * shared.age_rate[i - 1] < 0 ? 0 : P[i - 1 + (j - 1) * shared.dim.P.mult[1] + (k - 1) * shared.dim.P.mult[2]] * dt * shared.age_rate[i - 1]);
        }
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.na); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.nh); ++j) {
        for (size_t k = 1; k <= static_cast<size_t>(shared.num_int); ++k) {
          internal.phi[i - 1 + (j - 1) * shared.dim.phi.mult[1] + (k - 1) * shared.dim.phi.mult[2]] = shared.phi0 * ((1 - shared.phi1) / (1 + monty::math::pow((internal.IC[i - 1 + (j - 1) * shared.dim.IC.mult[1] + (k - 1) * shared.dim.IC.mult[2]] / shared.IC0), shared.kC)) + shared.phi1);
        }
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.prev_dim); ++i) {
      internal.n_prev[i - 1] = dust2::array::sum<real_type>(S, shared.dim.S, {shared.min_age_prev[i - 1] - 1, shared.max_age_prev[i - 1] - 1}, {0, shared.dim.S.dim[1] - 1}, {0, shared.dim.S.dim[2] - 1}) + dust2::array::sum<real_type>(T, shared.dim.T, {shared.min_age_prev[i - 1] - 1, shared.max_age_prev[i - 1] - 1}, {0, shared.dim.T.dim[1] - 1}, {0, shared.dim.T.dim[2] - 1}) + dust2::array::sum<real_type>(D, shared.dim.D, {shared.min_age_prev[i - 1] - 1, shared.max_age_prev[i - 1] - 1}, {0, shared.dim.D.dim[1] - 1}, {0, shared.dim.D.dim[2] - 1}) + dust2::array::sum<real_type>(A, shared.dim.A, {shared.min_age_prev[i - 1] - 1, shared.max_age_prev[i - 1] - 1}, {0, shared.dim.A.dim[1] - 1}, {0, shared.dim.A.dim[2] - 1}) + dust2::array::sum<real_type>(U, shared.dim.U, {shared.min_age_prev[i - 1] - 1, shared.max_age_prev[i - 1] - 1}, {0, shared.dim.U.dim[1] - 1}, {0, shared.dim.U.dim[2] - 1}) + dust2::array::sum<real_type>(P, shared.dim.P, {shared.min_age_prev[i - 1] - 1, shared.max_age_prev[i - 1] - 1}, {0, shared.dim.P.dim[1] - 1}, {0, shared.dim.P.dim[2] - 1});
    }
    for (size_t i = 1; i <= shared.dim.icm_pop.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.icm_pop.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.icm_pop.dim[2]; ++k) {
          internal.icm_pop[i - 1 + (j - 1) * shared.dim.icm_pop.mult[1] + (k - 1) * shared.dim.icm_pop.mult[2]] = internal.all[i - 1 + (j - 1) * shared.dim.all.mult[1] + (k - 1) * shared.dim.all.mult[2]] * ICM[i - 1 + (j - 1) * shared.dim.ICM.mult[1] + (k - 1) * shared.dim.ICM.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.ica_pop.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.ica_pop.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.ica_pop.dim[2]; ++k) {
          internal.ica_pop[i - 1 + (j - 1) * shared.dim.ica_pop.mult[1] + (k - 1) * shared.dim.ica_pop.mult[2]] = internal.all[i - 1 + (j - 1) * shared.dim.all.mult[1] + (k - 1) * shared.dim.all.mult[2]] * ICA[i - 1 + (j - 1) * shared.dim.ICA.mult[1] + (k - 1) * shared.dim.ICA.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.id_pop.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.id_pop.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.id_pop.dim[2]; ++k) {
          internal.id_pop[i - 1 + (j - 1) * shared.dim.id_pop.mult[1] + (k - 1) * shared.dim.id_pop.mult[2]] = internal.all[i - 1 + (j - 1) * shared.dim.all.mult[1] + (k - 1) * shared.dim.all.mult[2]] * ID[i - 1 + (j - 1) * shared.dim.ID.mult[1] + (k - 1) * shared.dim.ID.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.ib_pop.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.ib_pop.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.ib_pop.dim[2]; ++k) {
          internal.ib_pop[i - 1 + (j - 1) * shared.dim.ib_pop.mult[1] + (k - 1) * shared.dim.ib_pop.mult[2]] = internal.all[i - 1 + (j - 1) * shared.dim.all.mult[1] + (k - 1) * shared.dim.all.mult[2]] * IB[i - 1 + (j - 1) * shared.dim.IB.mult[1] + (k - 1) * shared.dim.IB.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.ic_pop.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.ic_pop.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.ic_pop.dim[2]; ++k) {
          internal.ic_pop[i - 1 + (j - 1) * shared.dim.ic_pop.mult[1] + (k - 1) * shared.dim.ic_pop.mult[2]] = internal.all[i - 1 + (j - 1) * shared.dim.all.mult[1] + (k - 1) * shared.dim.all.mult[2]] * internal.IC[i - 1 + (j - 1) * shared.dim.IC.mult[1] + (k - 1) * shared.dim.IC.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.all_deaths.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.all_deaths.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.all_deaths.dim[2]; ++k) {
          internal.all_deaths[i - 1 + (j - 1) * shared.dim.all_deaths.mult[1] + (k - 1) * shared.dim.all_deaths.mult[2]] = internal.S_death[i - 1 + (j - 1) * shared.dim.S_death.mult[1] + (k - 1) * shared.dim.S_death.mult[2]] + internal.T_death[i - 1 + (j - 1) * shared.dim.T_death.mult[1] + (k - 1) * shared.dim.T_death.mult[2]] + internal.D_death[i - 1 + (j - 1) * shared.dim.D_death.mult[1] + (k - 1) * shared.dim.D_death.mult[2]] + internal.A_death[i - 1 + (j - 1) * shared.dim.A_death.mult[1] + (k - 1) * shared.dim.A_death.mult[2]] + internal.U_death[i - 1 + (j - 1) * shared.dim.U_death.mult[1] + (k - 1) * shared.dim.U_death.mult[2]] + internal.P_death[i - 1 + (j - 1) * shared.dim.P_death.mult[1] + (k - 1) * shared.dim.P_death.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.epsilon_0_foi.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.epsilon_0_foi.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.epsilon_0_foi.dim[2]; ++k) {
          internal.epsilon_0_foi[i - 1 + (j - 1) * shared.dim.epsilon_0_foi.mult[1] + (k - 1) * shared.dim.epsilon_0_foi.mult[2]] = (internal.all[i - 1 + (j - 1) * shared.dim.all.mult[1] + (k - 1) * shared.dim.all.mult[2]] * internal.FOI[i - 1 + (j - 1) * shared.dim.FOI.mult[1] + (k - 1) * shared.dim.FOI.mult[2]]) / shared.psi[i - 1];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.ST_rate.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.ST_rate.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.ST_rate.dim[2]; ++k) {
          internal.ST_rate[i - 1 + (j - 1) * shared.dim.ST_rate.mult[1] + (k - 1) * shared.dim.ST_rate.mult[2]] = shared.ft * internal.phi[i - 1 + (j - 1) * shared.dim.phi.mult[1] + (k - 1) * shared.dim.phi.mult[2]] * internal.FOI[i - 1 + (j - 1) * shared.dim.FOI.mult[1] + (k - 1) * shared.dim.FOI.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.SD_rate.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.SD_rate.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.SD_rate.dim[2]; ++k) {
          internal.SD_rate[i - 1 + (j - 1) * shared.dim.SD_rate.mult[1] + (k - 1) * shared.dim.SD_rate.mult[2]] = (1 - shared.ft) * internal.phi[i - 1 + (j - 1) * shared.dim.phi.mult[1] + (k - 1) * shared.dim.phi.mult[2]] * internal.FOI[i - 1 + (j - 1) * shared.dim.FOI.mult[1] + (k - 1) * shared.dim.FOI.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.SA_rate.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.SA_rate.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.SA_rate.dim[2]; ++k) {
          internal.SA_rate[i - 1 + (j - 1) * shared.dim.SA_rate.mult[1] + (k - 1) * shared.dim.SA_rate.mult[2]] = (1 - internal.phi[i - 1 + (j - 1) * shared.dim.phi.mult[1] + (k - 1) * shared.dim.phi.mult[2]]) * internal.FOI[i - 1 + (j - 1) * shared.dim.FOI.mult[1] + (k - 1) * shared.dim.FOI.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.AT_rate.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.AT_rate.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.AT_rate.dim[2]; ++k) {
          internal.AT_rate[i - 1 + (j - 1) * shared.dim.AT_rate.mult[1] + (k - 1) * shared.dim.AT_rate.mult[2]] = internal.phi[i - 1 + (j - 1) * shared.dim.phi.mult[1] + (k - 1) * shared.dim.phi.mult[2]] * internal.FOI[i - 1 + (j - 1) * shared.dim.FOI.mult[1] + (k - 1) * shared.dim.FOI.mult[2]] * shared.ft;
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.AD_rate.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.AD_rate.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.AD_rate.dim[2]; ++k) {
          internal.AD_rate[i - 1 + (j - 1) * shared.dim.AD_rate.mult[1] + (k - 1) * shared.dim.AD_rate.mult[2]] = internal.phi[i - 1 + (j - 1) * shared.dim.phi.mult[1] + (k - 1) * shared.dim.phi.mult[2]] * internal.FOI[i - 1 + (j - 1) * shared.dim.FOI.mult[1] + (k - 1) * shared.dim.FOI.mult[2]] * (1 - shared.ft);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.UA_rate.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.UA_rate.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.UA_rate.dim[2]; ++k) {
          internal.UA_rate[i - 1 + (j - 1) * shared.dim.UA_rate.mult[1] + (k - 1) * shared.dim.UA_rate.mult[2]] = (1 - internal.phi[i - 1 + (j - 1) * shared.dim.phi.mult[1] + (k - 1) * shared.dim.phi.mult[2]]) * internal.FOI[i - 1 + (j - 1) * shared.dim.FOI.mult[1] + (k - 1) * shared.dim.FOI.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.UD_rate.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.UD_rate.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.UD_rate.dim[2]; ++k) {
          internal.UD_rate[i - 1 + (j - 1) * shared.dim.UD_rate.mult[1] + (k - 1) * shared.dim.UD_rate.mult[2]] = internal.phi[i - 1 + (j - 1) * shared.dim.phi.mult[1] + (k - 1) * shared.dim.phi.mult[2]] * (1 - shared.ft) * internal.FOI[i - 1 + (j - 1) * shared.dim.FOI.mult[1] + (k - 1) * shared.dim.FOI.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.UT_rate.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.UT_rate.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.UT_rate.dim[2]; ++k) {
          internal.UT_rate[i - 1 + (j - 1) * shared.dim.UT_rate.mult[1] + (k - 1) * shared.dim.UT_rate.mult[2]] = internal.phi[i - 1 + (j - 1) * shared.dim.phi.mult[1] + (k - 1) * shared.dim.phi.mult[2]] * shared.ft * internal.FOI[i - 1 + (j - 1) * shared.dim.FOI.mult[1] + (k - 1) * shared.dim.FOI.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.p_det.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.p_det.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.p_det.dim[2]; ++k) {
          internal.p_det[i - 1 + (j - 1) * shared.dim.p_det.mult[1] + (k - 1) * shared.dim.p_det.mult[2]] = shared.d1 + (1 - shared.d1) / (1 + shared.fd[i - 1] * monty::math::pow((ID[i - 1 + (j - 1) * shared.dim.ID.mult[1] + (k - 1) * shared.dim.ID.mult[2]] / shared.ID0), shared.kD));
        }
      }
    }
    const real_type rain_input = shared.interpolate_rain_input.eval(time);
    const real_type s_irs = shared.interpolate_s_irs.eval(time);
    const real_type r_irs = shared.interpolate_r_irs.eval(time);
    const real_type irs_eff_cov = shared.interpolate_irs_eff_cov.eval(time);
    const real_type r_itn = shared.interpolate_r_itn.eval(time);
    const real_type s_itn = shared.interpolate_s_itn.eval(time);
    const real_type itn_eff_cov = shared.interpolate_itn_eff_cov.eval(time);
    for (size_t i = 1; i <= shared.dim.ST_trans.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.ST_trans.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.ST_trans.dim[2]; ++k) {
          internal.ST_trans[i - 1 + (j - 1) * shared.dim.ST_trans.mult[1] + (k - 1) * shared.dim.ST_trans.mult[2]] = (S[i - 1 + (j - 1) * shared.dim.S.mult[1] + (k - 1) * shared.dim.S.mult[2]] * dt * internal.ST_rate[i - 1 + (j - 1) * shared.dim.ST_rate.mult[1] + (k - 1) * shared.dim.ST_rate.mult[2]] < 0 ? 0 : S[i - 1 + (j - 1) * shared.dim.S.mult[1] + (k - 1) * shared.dim.S.mult[2]] * dt * internal.ST_rate[i - 1 + (j - 1) * shared.dim.ST_rate.mult[1] + (k - 1) * shared.dim.ST_rate.mult[2]]);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.SD_trans.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.SD_trans.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.SD_trans.dim[2]; ++k) {
          internal.SD_trans[i - 1 + (j - 1) * shared.dim.SD_trans.mult[1] + (k - 1) * shared.dim.SD_trans.mult[2]] = (S[i - 1 + (j - 1) * shared.dim.S.mult[1] + (k - 1) * shared.dim.S.mult[2]] * dt * internal.SD_rate[i - 1 + (j - 1) * shared.dim.SD_rate.mult[1] + (k - 1) * shared.dim.SD_rate.mult[2]] < 0 ? 0 : S[i - 1 + (j - 1) * shared.dim.S.mult[1] + (k - 1) * shared.dim.S.mult[2]] * dt * internal.SD_rate[i - 1 + (j - 1) * shared.dim.SD_rate.mult[1] + (k - 1) * shared.dim.SD_rate.mult[2]]);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.SA_trans.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.SA_trans.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.SA_trans.dim[2]; ++k) {
          internal.SA_trans[i - 1 + (j - 1) * shared.dim.SA_trans.mult[1] + (k - 1) * shared.dim.SA_trans.mult[2]] = (S[i - 1 + (j - 1) * shared.dim.S.mult[1] + (k - 1) * shared.dim.S.mult[2]] * dt * internal.SA_rate[i - 1 + (j - 1) * shared.dim.SA_rate.mult[1] + (k - 1) * shared.dim.SA_rate.mult[2]] < 0 ? 0 : S[i - 1 + (j - 1) * shared.dim.S.mult[1] + (k - 1) * shared.dim.S.mult[2]] * dt * internal.SA_rate[i - 1 + (j - 1) * shared.dim.SA_rate.mult[1] + (k - 1) * shared.dim.SA_rate.mult[2]]);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.AT_trans.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.AT_trans.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.AT_trans.dim[2]; ++k) {
          internal.AT_trans[i - 1 + (j - 1) * shared.dim.AT_trans.mult[1] + (k - 1) * shared.dim.AT_trans.mult[2]] = (A[i - 1 + (j - 1) * shared.dim.A.mult[1] + (k - 1) * shared.dim.A.mult[2]] * dt * internal.AT_rate[i - 1 + (j - 1) * shared.dim.AT_rate.mult[1] + (k - 1) * shared.dim.AT_rate.mult[2]] < 0 ? 0 : A[i - 1 + (j - 1) * shared.dim.A.mult[1] + (k - 1) * shared.dim.A.mult[2]] * dt * internal.AT_rate[i - 1 + (j - 1) * shared.dim.AT_rate.mult[1] + (k - 1) * shared.dim.AT_rate.mult[2]]);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.AD_trans.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.AD_trans.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.AD_trans.dim[2]; ++k) {
          internal.AD_trans[i - 1 + (j - 1) * shared.dim.AD_trans.mult[1] + (k - 1) * shared.dim.AD_trans.mult[2]] = (A[i - 1 + (j - 1) * shared.dim.A.mult[1] + (k - 1) * shared.dim.A.mult[2]] * dt * internal.AD_rate[i - 1 + (j - 1) * shared.dim.AD_rate.mult[1] + (k - 1) * shared.dim.AD_rate.mult[2]] < 0 ? 0 : A[i - 1 + (j - 1) * shared.dim.A.mult[1] + (k - 1) * shared.dim.A.mult[2]] * dt * internal.AD_rate[i - 1 + (j - 1) * shared.dim.AD_rate.mult[1] + (k - 1) * shared.dim.AD_rate.mult[2]]);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.UA_trans.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.UA_trans.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.UA_trans.dim[2]; ++k) {
          internal.UA_trans[i - 1 + (j - 1) * shared.dim.UA_trans.mult[1] + (k - 1) * shared.dim.UA_trans.mult[2]] = (U[i - 1 + (j - 1) * shared.dim.U.mult[1] + (k - 1) * shared.dim.U.mult[2]] * dt * internal.UA_rate[i - 1 + (j - 1) * shared.dim.UA_rate.mult[1] + (k - 1) * shared.dim.UA_rate.mult[2]] < 0 ? 0 : U[i - 1 + (j - 1) * shared.dim.U.mult[1] + (k - 1) * shared.dim.U.mult[2]] * dt * internal.UA_rate[i - 1 + (j - 1) * shared.dim.UA_rate.mult[1] + (k - 1) * shared.dim.UA_rate.mult[2]]);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.UD_trans.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.UD_trans.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.UD_trans.dim[2]; ++k) {
          internal.UD_trans[i - 1 + (j - 1) * shared.dim.UD_trans.mult[1] + (k - 1) * shared.dim.UD_trans.mult[2]] = (U[i - 1 + (j - 1) * shared.dim.U.mult[1] + (k - 1) * shared.dim.U.mult[2]] * dt * internal.UD_rate[i - 1 + (j - 1) * shared.dim.UD_rate.mult[1] + (k - 1) * shared.dim.UD_rate.mult[2]] < 0 ? 0 : U[i - 1 + (j - 1) * shared.dim.U.mult[1] + (k - 1) * shared.dim.U.mult[2]] * dt * internal.UD_rate[i - 1 + (j - 1) * shared.dim.UD_rate.mult[1] + (k - 1) * shared.dim.UD_rate.mult[2]]);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.UT_trans.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.UT_trans.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.UT_trans.dim[2]; ++k) {
          internal.UT_trans[i - 1 + (j - 1) * shared.dim.UT_trans.mult[1] + (k - 1) * shared.dim.UT_trans.mult[2]] = (U[i - 1 + (j - 1) * shared.dim.U.mult[1] + (k - 1) * shared.dim.U.mult[2]] * dt * internal.UT_rate[i - 1 + (j - 1) * shared.dim.UT_rate.mult[1] + (k - 1) * shared.dim.UT_rate.mult[2]] < 0 ? 0 : U[i - 1 + (j - 1) * shared.dim.U.mult[1] + (k - 1) * shared.dim.U.mult[2]] * dt * internal.UT_rate[i - 1 + (j - 1) * shared.dim.UT_rate.mult[1] + (k - 1) * shared.dim.UT_rate.mult[2]]);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.cA.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.cA.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.cA.dim[2]; ++k) {
          internal.cA[i - 1 + (j - 1) * shared.dim.cA.mult[1] + (k - 1) * shared.dim.cA.mult[2]] = shared.cU + (shared.cD - shared.cU) * monty::math::pow(internal.p_det[i - 1 + (j - 1) * shared.dim.p_det.mult[1] + (k - 1) * shared.dim.p_det.mult[2]], shared.gamma1);
        }
      }
    }
    const real_type w2 = 1 - shared.phi_bednets + shared.phi_bednets * s_itn;
    const real_type w3 = 1 - shared.phi_indoors + shared.phi_indoors * (1 - r_irs) * s_irs;
    const real_type w4 = 1 - shared.phi_indoors + shared.phi_bednets * (1 - r_irs) * s_itn * s_irs + (shared.phi_indoors - shared.phi_bednets) * (1 - r_irs) * s_irs;
    const real_type z2 = shared.phi_bednets * r_itn;
    const real_type z3 = shared.phi_indoors * r_irs;
    const real_type z4 = shared.phi_bednets * (1 - r_irs) * r_itn + shared.phi_indoors * r_irs;
    for (size_t i = 1; i <= shared.dim.detect_prev_full.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.detect_prev_full.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.detect_prev_full.dim[2]; ++k) {
          internal.detect_prev_full[i - 1 + (j - 1) * shared.dim.detect_prev_full.mult[1] + (k - 1) * shared.dim.detect_prev_full.mult[2]] = T[i - 1 + (j - 1) * shared.dim.T.mult[1] + (k - 1) * shared.dim.T.mult[2]] + D[i - 1 + (j - 1) * shared.dim.D.mult[1] + (k - 1) * shared.dim.D.mult[2]] + A[i - 1 + (j - 1) * shared.dim.A.mult[1] + (k - 1) * shared.dim.A.mult[2]] * internal.p_det[i - 1 + (j - 1) * shared.dim.p_det.mult[1] + (k - 1) * shared.dim.p_det.mult[2]];
        }
      }
    }
    internal.w_[0] = shared.w1;
    internal.w_[1] = shared.w1 * (1 - itn_eff_cov) + w2 * itn_eff_cov;
    internal.w_[2] = shared.w1 * (1 - irs_eff_cov) + w3 * irs_eff_cov;
    internal.w_[3] = shared.w1 * (1 - irs_eff_cov) * (1 - itn_eff_cov) + w2 * (1 - irs_eff_cov) * itn_eff_cov + w3 * irs_eff_cov * (1 - itn_eff_cov) + w4 * irs_eff_cov * itn_eff_cov;
    internal.z_[0] = shared.z1;
    internal.z_[1] = z2 * itn_eff_cov;
    internal.z_[2] = z3 * irs_eff_cov;
    internal.z_[3] = z2 * (1 - irs_eff_cov) * itn_eff_cov + z3 * irs_eff_cov * (1 - itn_eff_cov) + z4 * irs_eff_cov * itn_eff_cov;
    for (size_t i = 1; i <= shared.dim.clin_inc.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.clin_inc.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.clin_inc.dim[2]; ++k) {
          internal.clin_inc[i - 1 + (j - 1) * shared.dim.clin_inc.mult[1] + (k - 1) * shared.dim.clin_inc.mult[2]] = internal.ST_trans[i - 1 + (j - 1) * shared.dim.ST_trans.mult[1] + (k - 1) * shared.dim.ST_trans.mult[2]] + internal.SD_trans[i - 1 + (j - 1) * shared.dim.SD_trans.mult[1] + (k - 1) * shared.dim.SD_trans.mult[2]] + internal.AT_trans[i - 1 + (j - 1) * shared.dim.AT_trans.mult[1] + (k - 1) * shared.dim.AT_trans.mult[2]] + internal.AD_trans[i - 1 + (j - 1) * shared.dim.AD_trans.mult[1] + (k - 1) * shared.dim.AD_trans.mult[2]] + internal.UD_trans[i - 1 + (j - 1) * shared.dim.UD_trans.mult[1] + (k - 1) * shared.dim.UD_trans.mult[2]] + internal.UT_trans[i - 1 + (j - 1) * shared.dim.UT_trans.mult[1] + (k - 1) * shared.dim.UT_trans.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.prev_dim); ++i) {
      internal.detect_prev[i - 1] = dust2::array::sum<real_type>(internal.detect_prev_full.data(), shared.dim.detect_prev_full, {shared.min_age_prev[i - 1] - 1, shared.max_age_prev[i - 1] - 1}, {0, shared.dim.detect_prev_full.dim[1] - 1}, {0, shared.dim.detect_prev_full.dim[2] - 1});
    }
    for (size_t i = 1; i <= shared.dim.w.size; ++i) {
      internal.w[i - 1] = internal.w_[i - 1];
    }
    internal.yy_[0] = 1;
    internal.yy_[1] = internal.w_[1];
    internal.yy_[2] = 1 - (shared.phi_indoors - shared.phi_indoors * (1 - r_irs)) * irs_eff_cov;
    internal.yy_[3] = 1 - (shared.phi_indoors + shared.phi_bednets * (1 - r_irs) * s_itn + (shared.phi_indoors - shared.phi_bednets) * (1 - r_irs)) * itn_eff_cov * irs_eff_cov;
    for (size_t i = 1; i <= shared.dim.z.size; ++i) {
      internal.z[i - 1] = internal.z_[i - 1];
    }
    for (size_t i = 1; i <= shared.dim.yy.size; ++i) {
      internal.yy[i - 1] = internal.yy_[i - 1];
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.num_int); ++i) {
      internal.zhi[i - 1] = shared.cov[i - 1] * internal.z[i - 1];
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.num_int); ++i) {
      internal.whi[i - 1] = shared.cov[i - 1] * internal.w[i - 1];
    }
    const real_type zh = dust2::array::sum<real_type>(internal.zhi.data(), shared.dim.zhi);
    const real_type wh = dust2::array::sum<real_type>(internal.whi.data(), shared.dim.whi);
    const real_type zbar = shared.Q0 * zh;
    const real_type wbar = 1 - shared.Q0 + shared.Q0 * wh;
    const real_type blood_meal_rate = 1 / (shared.foraging_time / (1 - zbar) + shared.gonotrophic_cycle);
    const real_type p1 = wbar * shared.p10 / (1 - zbar * shared.p10);
    const real_type Q = 1 - (1 - shared.Q0) / wbar;
    const real_type mu = -blood_meal_rate * monty::math::log(p1 * shared.p2);
    const real_type av = blood_meal_rate * Q;
    const real_type surv = monty::math::exp(-mu * shared.delayMos_use);
    const real_type eov = shared.betaL / mu * (monty::math::exp(mu / blood_meal_rate) - 1);
    for (size_t i = 1; i <= static_cast<size_t>(shared.num_int); ++i) {
      internal.av_mosq[i - 1] = av * internal.w[i - 1] / wh;
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.num_int); ++i) {
      internal.av_human[i - 1] = av * internal.yy[i - 1] / wh;
    }
    for (size_t i = 1; i <= shared.dim.EIR.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.EIR.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.EIR.dim[2]; ++k) {
          internal.EIR[i - 1 + (j - 1) * shared.dim.EIR.mult[1] + (k - 1) * shared.dim.EIR.mult[2]] = internal.av_mosq[k - 1] * shared.zeta[j - 1] * shared.psi[i - 1] * Iv / shared.omega;
        }
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.na); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.nh); ++j) {
        for (size_t k = 1; k <= static_cast<size_t>(shared.num_int); ++k) {
          internal.FOIvijk[i - 1 + (j - 1) * shared.dim.FOIvijk.mult[1] + (k - 1) * shared.dim.FOIvijk.mult[2]] = ((shared.cT * T[i - 1 + (j - 1) * shared.dim.T.mult[1] + (k - 1) * shared.dim.T.mult[2]] + shared.cD * D[i - 1 + (j - 1) * shared.dim.D.mult[1] + (k - 1) * shared.dim.D.mult[2]] + internal.cA[i - 1 + (j - 1) * shared.dim.cA.mult[1] + (k - 1) * shared.dim.cA.mult[2]] * A[i - 1 + (j - 1) * shared.dim.A.mult[1] + (k - 1) * shared.dim.A.mult[2]] + shared.cU * U[i - 1 + (j - 1) * shared.dim.U.mult[1] + (k - 1) * shared.dim.U.mult[2]]) / H) * shared.zeta[j - 1] * internal.av_mosq[k - 1] * shared.psi[i - 1] / shared.omega;
        }
      }
    }
    const real_type incv = ince_delay[shared.lag_ratesMos - 1] * shared.lag_ratesMos / shared.delayMos_use * surv;
    const real_type beta_larval = eov * mu * monty::math::exp(-mu / blood_meal_rate) / (1 - monty::math::exp(-mu / blood_meal_rate));
    for (size_t i = 1; i <= static_cast<size_t>(shared.na); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.nh); ++j) {
        for (size_t k = 1; k <= static_cast<size_t>(shared.num_int); ++k) {
          internal.FOI_lag[i - 1 + (j - 1) * shared.dim.FOI_lag.mult[1] + (k - 1) * shared.dim.FOI_lag.mult[2]] = internal.EIR[i - 1 + (j - 1) * shared.dim.EIR.mult[1] + (k - 1) * shared.dim.EIR.mult[2]] * ((IB[i - 1 + (j - 1) * shared.dim.IB.mult[1] + (k - 1) * shared.dim.IB.mult[2]] == 0 ? shared.b0 : internal.b[i - 1 + (j - 1) * shared.dim.b.mult[1] + (k - 1) * shared.dim.b.mult[2]]));
        }
      }
    }
    const real_type lag_FOIv = dust2::array::sum<real_type>(internal.FOIvijk.data(), shared.dim.FOIvijk);
    const real_type lambda = -static_cast<real_type>(0.5) * shared.b_lambda + monty::math::sqrt(static_cast<real_type>(0.25) * monty::math::pow(shared.b_lambda, 2) + shared.gammaL * beta_larval * shared.muLL * shared.dEL / (2 * shared.muEL * shared.mum_use * shared.dLL * (1 + shared.dPL * shared.muPL)));
    for (size_t i = 1; i <= shared.dim.all_eir.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.all_eir.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.all_eir.dim[2]; ++k) {
          internal.all_eir[i - 1 + (j - 1) * shared.dim.all_eir.mult[1] + (k - 1) * shared.dim.all_eir.mult[2]] = (internal.all[i - 1 + (j - 1) * shared.dim.all.mult[1] + (k - 1) * shared.dim.all.mult[2]] * internal.EIR[i - 1 + (j - 1) * shared.dim.EIR.mult[1] + (k - 1) * shared.dim.EIR.mult[2]]);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.epsilon_0.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.epsilon_0.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.epsilon_0.dim[2]; ++k) {
          internal.epsilon_0[i - 1 + (j - 1) * shared.dim.epsilon_0.mult[1] + (k - 1) * shared.dim.epsilon_0.mult[2]] = (internal.all[i - 1 + (j - 1) * shared.dim.all.mult[1] + (k - 1) * shared.dim.all.mult[2]] * internal.EIR[i - 1 + (j - 1) * shared.dim.EIR.mult[1] + (k - 1) * shared.dim.EIR.mult[2]]) / shared.psi[i - 1];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.epsilon_0_no_int.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.epsilon_0_no_int.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.epsilon_0_no_int.dim[2]; ++k) {
          internal.epsilon_0_no_int[i - 1 + (j - 1) * shared.dim.epsilon_0_no_int.mult[1] + (k - 1) * shared.dim.epsilon_0_no_int.mult[2]] = (internal.all[i - 1 + (j - 1) * shared.dim.all.mult[1]] * internal.EIR[i - 1 + (j - 1) * shared.dim.EIR.mult[1]]) / shared.psi[i - 1];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.epsilon_0_irs.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.epsilon_0_irs.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.epsilon_0_irs.dim[2]; ++k) {
          internal.epsilon_0_irs[i - 1 + (j - 1) * shared.dim.epsilon_0_irs.mult[1] + (k - 1) * shared.dim.epsilon_0_irs.mult[2]] = (internal.all[i - 1 + (j - 1) * shared.dim.all.mult[1] + 2 * shared.dim.all.mult[2]] * internal.EIR[i - 1 + (j - 1) * shared.dim.EIR.mult[1] + 2 * shared.dim.EIR.mult[2]]) / shared.psi[i - 1];
        }
      }
    }
    const real_type K0 = 2 * shared.mv0 * shared.dLL * shared.mum_use * (1 + shared.dPL * shared.muPL) * shared.gammaL * (lambda + 1) / (lambda / (shared.muLL * shared.dEL) - 1 / (shared.muLL * shared.dLL) - 1);
    const real_type KL = K0 * rain_input;
    {
      const size_t i = 1;
      for (size_t j = 1; j <= static_cast<size_t>(shared.nh); ++j) {
        for (size_t k = 1; k <= static_cast<size_t>(shared.num_int); ++k) {
          state_next[(j - 1) * shared.dim.S.mult[1] + (k - 1) * shared.dim.S.mult[2] + 47] = S[i - 1 + (j - 1) * shared.dim.S.mult[1] + (k - 1) * shared.dim.S.mult[2]] + internal.PS_trans[i - 1 + (j - 1) * shared.dim.PS_trans.mult[1] + (k - 1) * shared.dim.PS_trans.mult[2]] + internal.US_trans[i - 1 + (j - 1) * shared.dim.US_trans.mult[1] + (k - 1) * shared.dim.US_trans.mult[2]] - internal.ST_trans[i - 1 + (j - 1) * shared.dim.ST_trans.mult[1] + (k - 1) * shared.dim.ST_trans.mult[2]] - internal.SD_trans[i - 1 + (j - 1) * shared.dim.SD_trans.mult[1] + (k - 1) * shared.dim.SD_trans.mult[2]] - internal.SA_trans[i - 1 + (j - 1) * shared.dim.SA_trans.mult[1] + (k - 1) * shared.dim.SA_trans.mult[2]] - internal.S_death[i - 1 + (j - 1) * shared.dim.S_death.mult[1] + (k - 1) * shared.dim.S_death.mult[2]] - internal.S_age[i - 1 + (j - 1) * shared.dim.S_age.mult[1] + (k - 1) * shared.dim.S_age.mult[2]] + internal.births[(j - 1) * shared.dim.births.mult[1] + (k - 1) * shared.dim.births.mult[2]];
        }
      }
    }
    for (size_t i = 2; i <= static_cast<size_t>(shared.na); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.nh); ++j) {
        for (size_t k = 1; k <= static_cast<size_t>(shared.num_int); ++k) {
          state_next[i - 1 + (j - 1) * shared.dim.S.mult[1] + (k - 1) * shared.dim.S.mult[2] + 47] = S[i - 1 + (j - 1) * shared.dim.S.mult[1] + (k - 1) * shared.dim.S.mult[2]] + internal.PS_trans[i - 1 + (j - 1) * shared.dim.PS_trans.mult[1] + (k - 1) * shared.dim.PS_trans.mult[2]] + internal.US_trans[i - 1 + (j - 1) * shared.dim.US_trans.mult[1] + (k - 1) * shared.dim.US_trans.mult[2]] - internal.ST_trans[i - 1 + (j - 1) * shared.dim.ST_trans.mult[1] + (k - 1) * shared.dim.ST_trans.mult[2]] - internal.SD_trans[i - 1 + (j - 1) * shared.dim.SD_trans.mult[1] + (k - 1) * shared.dim.SD_trans.mult[2]] - internal.SA_trans[i - 1 + (j - 1) * shared.dim.SA_trans.mult[1] + (k - 1) * shared.dim.SA_trans.mult[2]] - internal.S_death[i - 1 + (j - 1) * shared.dim.S_death.mult[1] + (k - 1) * shared.dim.S_death.mult[2]] - internal.S_age[i - 1 + (j - 1) * shared.dim.S_age.mult[1] + (k - 1) * shared.dim.S_age.mult[2]] + internal.S_age[i - 1 - 1 + (j - 1) * shared.dim.S_age.mult[1] + (k - 1) * shared.dim.S_age.mult[2]];
        }
      }
    }
    {
      const size_t i = 1;
      for (size_t j = 1; j <= static_cast<size_t>(shared.nh); ++j) {
        for (size_t k = 1; k <= static_cast<size_t>(shared.num_int); ++k) {
          state_next[(j - 1) * shared.dim.T.mult[1] + (k - 1) * shared.dim.T.mult[2] + shared.odin.offset.state[48]] = T[i - 1 + (j - 1) * shared.dim.T.mult[1] + (k - 1) * shared.dim.T.mult[2]] + internal.AT_trans[i - 1 + (j - 1) * shared.dim.AT_trans.mult[1] + (k - 1) * shared.dim.AT_trans.mult[2]] + internal.ST_trans[i - 1 + (j - 1) * shared.dim.ST_trans.mult[1] + (k - 1) * shared.dim.ST_trans.mult[2]] + internal.UT_trans[i - 1 + (j - 1) * shared.dim.UT_trans.mult[1] + (k - 1) * shared.dim.UT_trans.mult[2]] - internal.TP_trans[i - 1 + (j - 1) * shared.dim.TP_trans.mult[1] + (k - 1) * shared.dim.TP_trans.mult[2]] - internal.T_age[i - 1 + (j - 1) * shared.dim.T_age.mult[1] + (k - 1) * shared.dim.T_age.mult[2]] - internal.T_death[i - 1 + (j - 1) * shared.dim.T_death.mult[1] + (k - 1) * shared.dim.T_death.mult[2]];
        }
      }
    }
    for (size_t i = 2; i <= static_cast<size_t>(shared.na); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.nh); ++j) {
        for (size_t k = 1; k <= static_cast<size_t>(shared.num_int); ++k) {
          state_next[i - 1 + (j - 1) * shared.dim.T.mult[1] + (k - 1) * shared.dim.T.mult[2] + shared.odin.offset.state[48]] = T[i - 1 + (j - 1) * shared.dim.T.mult[1] + (k - 1) * shared.dim.T.mult[2]] + internal.AT_trans[i - 1 + (j - 1) * shared.dim.AT_trans.mult[1] + (k - 1) * shared.dim.AT_trans.mult[2]] + internal.ST_trans[i - 1 + (j - 1) * shared.dim.ST_trans.mult[1] + (k - 1) * shared.dim.ST_trans.mult[2]] + internal.UT_trans[i - 1 + (j - 1) * shared.dim.UT_trans.mult[1] + (k - 1) * shared.dim.UT_trans.mult[2]] - internal.TP_trans[i - 1 + (j - 1) * shared.dim.TP_trans.mult[1] + (k - 1) * shared.dim.TP_trans.mult[2]] - internal.T_age[i - 1 + (j - 1) * shared.dim.T_age.mult[1] + (k - 1) * shared.dim.T_age.mult[2]] - internal.T_death[i - 1 + (j - 1) * shared.dim.T_death.mult[1] + (k - 1) * shared.dim.T_death.mult[2]] + internal.T_age[i - 1 - 1 + (j - 1) * shared.dim.T_age.mult[1] + (k - 1) * shared.dim.T_age.mult[2]];
        }
      }
    }
    {
      const size_t i = 1;
      for (size_t j = 1; j <= static_cast<size_t>(shared.nh); ++j) {
        for (size_t k = 1; k <= static_cast<size_t>(shared.num_int); ++k) {
          state_next[(j - 1) * shared.dim.D.mult[1] + (k - 1) * shared.dim.D.mult[2] + shared.odin.offset.state[49]] = D[i - 1 + (j - 1) * shared.dim.D.mult[1] + (k - 1) * shared.dim.D.mult[2]] + internal.SD_trans[i - 1 + (j - 1) * shared.dim.SD_trans.mult[1] + (k - 1) * shared.dim.SD_trans.mult[2]] + internal.AD_trans[i - 1 + (j - 1) * shared.dim.AD_trans.mult[1] + (k - 1) * shared.dim.AD_trans.mult[2]] + internal.UD_trans[i - 1 + (j - 1) * shared.dim.UD_trans.mult[1] + (k - 1) * shared.dim.UD_trans.mult[2]] - internal.DA_trans[i - 1 + (j - 1) * shared.dim.DA_trans.mult[1] + (k - 1) * shared.dim.DA_trans.mult[2]] - internal.D_death[i - 1 + (j - 1) * shared.dim.D_death.mult[1] + (k - 1) * shared.dim.D_death.mult[2]] - internal.D_age[i - 1 + (j - 1) * shared.dim.D_age.mult[1] + (k - 1) * shared.dim.D_age.mult[2]];
        }
      }
    }
    for (size_t i = 2; i <= static_cast<size_t>(shared.na); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.nh); ++j) {
        for (size_t k = 1; k <= static_cast<size_t>(shared.num_int); ++k) {
          state_next[i - 1 + (j - 1) * shared.dim.D.mult[1] + (k - 1) * shared.dim.D.mult[2] + shared.odin.offset.state[49]] = D[i - 1 + (j - 1) * shared.dim.D.mult[1] + (k - 1) * shared.dim.D.mult[2]] + internal.SD_trans[i - 1 + (j - 1) * shared.dim.SD_trans.mult[1] + (k - 1) * shared.dim.SD_trans.mult[2]] + internal.AD_trans[i - 1 + (j - 1) * shared.dim.AD_trans.mult[1] + (k - 1) * shared.dim.AD_trans.mult[2]] + internal.UD_trans[i - 1 + (j - 1) * shared.dim.UD_trans.mult[1] + (k - 1) * shared.dim.UD_trans.mult[2]] - internal.DA_trans[i - 1 + (j - 1) * shared.dim.DA_trans.mult[1] + (k - 1) * shared.dim.DA_trans.mult[2]] - internal.D_death[i - 1 + (j - 1) * shared.dim.D_death.mult[1] + (k - 1) * shared.dim.D_death.mult[2]] - internal.D_age[i - 1 + (j - 1) * shared.dim.D_age.mult[1] + (k - 1) * shared.dim.D_age.mult[2]] + internal.D_age[i - 1 - 1 + (j - 1) * shared.dim.D_age.mult[1] + (k - 1) * shared.dim.D_age.mult[2]];
        }
      }
    }
    {
      const size_t i = 1;
      for (size_t j = 1; j <= static_cast<size_t>(shared.nh); ++j) {
        for (size_t k = 1; k <= static_cast<size_t>(shared.num_int); ++k) {
          state_next[(j - 1) * shared.dim.A.mult[1] + (k - 1) * shared.dim.A.mult[2] + shared.odin.offset.state[50]] = A[i - 1 + (j - 1) * shared.dim.A.mult[1] + (k - 1) * shared.dim.A.mult[2]] + internal.SA_trans[i - 1 + (j - 1) * shared.dim.SA_trans.mult[1] + (k - 1) * shared.dim.SA_trans.mult[2]] + internal.DA_trans[i - 1 + (j - 1) * shared.dim.DA_trans.mult[1] + (k - 1) * shared.dim.DA_trans.mult[2]] + internal.UA_trans[i - 1 + (j - 1) * shared.dim.UA_trans.mult[1] + (k - 1) * shared.dim.UA_trans.mult[2]] - internal.AT_trans[i - 1 + (j - 1) * shared.dim.AT_trans.mult[1] + (k - 1) * shared.dim.AT_trans.mult[2]] - internal.AD_trans[i - 1 + (j - 1) * shared.dim.AD_trans.mult[1] + (k - 1) * shared.dim.AD_trans.mult[2]] - internal.AU_trans[i - 1 + (j - 1) * shared.dim.AU_trans.mult[1] + (k - 1) * shared.dim.AU_trans.mult[2]] - internal.A_death[i - 1 + (j - 1) * shared.dim.A_death.mult[1] + (k - 1) * shared.dim.A_death.mult[2]] - internal.A_age[i - 1 + (j - 1) * shared.dim.A_age.mult[1] + (k - 1) * shared.dim.A_age.mult[2]];
        }
      }
    }
    for (size_t i = 2; i <= static_cast<size_t>(shared.na); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.nh); ++j) {
        for (size_t k = 1; k <= static_cast<size_t>(shared.num_int); ++k) {
          state_next[i - 1 + (j - 1) * shared.dim.A.mult[1] + (k - 1) * shared.dim.A.mult[2] + shared.odin.offset.state[50]] = A[i - 1 + (j - 1) * shared.dim.A.mult[1] + (k - 1) * shared.dim.A.mult[2]] + internal.SA_trans[i - 1 + (j - 1) * shared.dim.SA_trans.mult[1] + (k - 1) * shared.dim.SA_trans.mult[2]] + internal.DA_trans[i - 1 + (j - 1) * shared.dim.DA_trans.mult[1] + (k - 1) * shared.dim.DA_trans.mult[2]] + internal.UA_trans[i - 1 + (j - 1) * shared.dim.UA_trans.mult[1] + (k - 1) * shared.dim.UA_trans.mult[2]] - internal.AT_trans[i - 1 + (j - 1) * shared.dim.AT_trans.mult[1] + (k - 1) * shared.dim.AT_trans.mult[2]] - internal.AD_trans[i - 1 + (j - 1) * shared.dim.AD_trans.mult[1] + (k - 1) * shared.dim.AD_trans.mult[2]] - internal.AU_trans[i - 1 + (j - 1) * shared.dim.AU_trans.mult[1] + (k - 1) * shared.dim.AU_trans.mult[2]] - internal.A_death[i - 1 + (j - 1) * shared.dim.A_death.mult[1] + (k - 1) * shared.dim.A_death.mult[2]] - internal.A_age[i - 1 + (j - 1) * shared.dim.A_age.mult[1] + (k - 1) * shared.dim.A_age.mult[2]] + internal.A_age[i - 1 - 1 + (j - 1) * shared.dim.A_age.mult[1] + (k - 1) * shared.dim.A_age.mult[2]];
        }
      }
    }
    {
      const size_t i = 1;
      for (size_t j = 1; j <= static_cast<size_t>(shared.nh); ++j) {
        for (size_t k = 1; k <= static_cast<size_t>(shared.num_int); ++k) {
          state_next[(j - 1) * shared.dim.U.mult[1] + (k - 1) * shared.dim.U.mult[2] + shared.odin.offset.state[51]] = U[i - 1 + (j - 1) * shared.dim.U.mult[1] + (k - 1) * shared.dim.U.mult[2]] + internal.AU_trans[i - 1 + (j - 1) * shared.dim.AU_trans.mult[1] + (k - 1) * shared.dim.AU_trans.mult[2]] - internal.UD_trans[i - 1 + (j - 1) * shared.dim.UD_trans.mult[1] + (k - 1) * shared.dim.UD_trans.mult[2]] - internal.UT_trans[i - 1 + (j - 1) * shared.dim.UT_trans.mult[1] + (k - 1) * shared.dim.UT_trans.mult[2]] - internal.US_trans[i - 1 + (j - 1) * shared.dim.US_trans.mult[1] + (k - 1) * shared.dim.US_trans.mult[2]] - internal.UA_trans[i - 1 + (j - 1) * shared.dim.UA_trans.mult[1] + (k - 1) * shared.dim.UA_trans.mult[2]] - internal.U_age[i - 1 + (j - 1) * shared.dim.U_age.mult[1] + (k - 1) * shared.dim.U_age.mult[2]] - internal.U_death[i - 1 + (j - 1) * shared.dim.U_death.mult[1] + (k - 1) * shared.dim.U_death.mult[2]];
        }
      }
    }
    for (size_t i = 2; i <= static_cast<size_t>(shared.na); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.nh); ++j) {
        for (size_t k = 1; k <= static_cast<size_t>(shared.num_int); ++k) {
          state_next[i - 1 + (j - 1) * shared.dim.U.mult[1] + (k - 1) * shared.dim.U.mult[2] + shared.odin.offset.state[51]] = U[i - 1 + (j - 1) * shared.dim.U.mult[1] + (k - 1) * shared.dim.U.mult[2]] + internal.AU_trans[i - 1 + (j - 1) * shared.dim.AU_trans.mult[1] + (k - 1) * shared.dim.AU_trans.mult[2]] - internal.UD_trans[i - 1 + (j - 1) * shared.dim.UD_trans.mult[1] + (k - 1) * shared.dim.UD_trans.mult[2]] - internal.UT_trans[i - 1 + (j - 1) * shared.dim.UT_trans.mult[1] + (k - 1) * shared.dim.UT_trans.mult[2]] - internal.US_trans[i - 1 + (j - 1) * shared.dim.US_trans.mult[1] + (k - 1) * shared.dim.US_trans.mult[2]] - internal.UA_trans[i - 1 + (j - 1) * shared.dim.UA_trans.mult[1] + (k - 1) * shared.dim.UA_trans.mult[2]] - internal.U_age[i - 1 + (j - 1) * shared.dim.U_age.mult[1] + (k - 1) * shared.dim.U_age.mult[2]] - internal.U_death[i - 1 + (j - 1) * shared.dim.U_death.mult[1] + (k - 1) * shared.dim.U_death.mult[2]] + internal.U_age[i - 1 - 1 + (j - 1) * shared.dim.U_age.mult[1] + (k - 1) * shared.dim.U_age.mult[2]];
        }
      }
    }
    {
      const size_t i = 1;
      for (size_t j = 1; j <= static_cast<size_t>(shared.nh); ++j) {
        for (size_t k = 1; k <= static_cast<size_t>(shared.num_int); ++k) {
          state_next[(j - 1) * shared.dim.P.mult[1] + (k - 1) * shared.dim.P.mult[2] + shared.odin.offset.state[52]] = P[i - 1 + (j - 1) * shared.dim.P.mult[1] + (k - 1) * shared.dim.P.mult[2]] + internal.TP_trans[i - 1 + (j - 1) * shared.dim.TP_trans.mult[1] + (k - 1) * shared.dim.TP_trans.mult[2]] - internal.PS_trans[i - 1 + (j - 1) * shared.dim.PS_trans.mult[1] + (k - 1) * shared.dim.PS_trans.mult[2]] - internal.P_death[i - 1 + (j - 1) * shared.dim.P_death.mult[1] + (k - 1) * shared.dim.P_death.mult[2]] - internal.P_age[i - 1 + (j - 1) * shared.dim.P_age.mult[1] + (k - 1) * shared.dim.P_age.mult[2]];
        }
      }
    }
    for (size_t i = 2; i <= static_cast<size_t>(shared.na); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.nh); ++j) {
        for (size_t k = 1; k <= static_cast<size_t>(shared.num_int); ++k) {
          state_next[i - 1 + (j - 1) * shared.dim.P.mult[1] + (k - 1) * shared.dim.P.mult[2] + shared.odin.offset.state[52]] = P[i - 1 + (j - 1) * shared.dim.P.mult[1] + (k - 1) * shared.dim.P.mult[2]] + internal.TP_trans[i - 1 + (j - 1) * shared.dim.TP_trans.mult[1] + (k - 1) * shared.dim.TP_trans.mult[2]] - internal.PS_trans[i - 1 + (j - 1) * shared.dim.PS_trans.mult[1] + (k - 1) * shared.dim.PS_trans.mult[2]] - internal.P_death[i - 1 + (j - 1) * shared.dim.P_death.mult[1] + (k - 1) * shared.dim.P_death.mult[2]] - internal.P_age[i - 1 + (j - 1) * shared.dim.P_age.mult[1] + (k - 1) * shared.dim.P_age.mult[2]] + internal.P_age[i - 1 - 1 + (j - 1) * shared.dim.P_age.mult[1] + (k - 1) * shared.dim.P_age.mult[2]];
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.FOI_XL.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.FOI_XL.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.FOI_XL.dim[2]; ++k) {
          state_next[i - 1 + (j - 1) * shared.dim.FOI_XL.mult[1] + (k - 1) * shared.dim.FOI_XL.mult[2] + shared.odin.offset.state[53]] = FOI_XL[i - 1 + (j - 1) * shared.dim.FOI_XL.mult[1] + (k - 1) * shared.dim.FOI_XL.mult[2]] + dt * ((shared.lag_rates / shared.dE) * internal.FOI_lag[i - 1 + (j - 1) * shared.dim.FOI_lag.mult[1] + (k - 1) * shared.dim.FOI_lag.mult[2]] - (shared.lag_rates / shared.dE) * FOI_XL[i - 1 + (j - 1) * shared.dim.FOI_XL.mult[1] + (k - 1) * shared.dim.FOI_XL.mult[2]]);
        }
      }
    }
    for (size_t i = 1; i <= shared.dim.FOI_XL.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.FOI_XL.dim[1]; ++j) {
        for (size_t k = 1; k <= shared.dim.FOI_XL.dim[2]; ++k) {
          for (size_t l = 2; l <= static_cast<size_t>(shared.lag_rates); ++l) {
            state_next[i - 1 + (j - 1) * shared.dim.FOI_XL.mult[1] + (k - 1) * shared.dim.FOI_XL.mult[2] + (l - 1) * shared.dim.FOI_XL.mult[3] + shared.odin.offset.state[53]] = FOI_XL[i - 1 + (j - 1) * shared.dim.FOI_XL.mult[1] + (k - 1) * shared.dim.FOI_XL.mult[2] + (l - 1) * shared.dim.FOI_XL.mult[3]] + dt * ((shared.lag_rates / shared.dE) * FOI_XL[i - 1 + (j - 1) * shared.dim.FOI_XL.mult[1] + (k - 1) * shared.dim.FOI_XL.mult[2] + (l - 1 - 1) * shared.dim.FOI_XL.mult[3]] - (shared.lag_rates / shared.dE) * FOI_XL[i - 1 + (j - 1) * shared.dim.FOI_XL.mult[1] + (k - 1) * shared.dim.FOI_XL.mult[2] + (l - 1) * shared.dim.FOI_XL.mult[3]]);
          }
        }
      }
    }
    {
      const size_t i = 1;
      for (size_t j = 1; j <= static_cast<size_t>(shared.nh); ++j) {
        for (size_t k = 1; k <= static_cast<size_t>(shared.num_int); ++k) {
          state_next[(j - 1) * shared.dim.ICM.mult[1] + (k - 1) * shared.dim.ICM.mult[2] + shared.odin.offset.state[54]] = ICM[i - 1 + (j - 1) * shared.dim.ICM.mult[1] + (k - 1) * shared.dim.ICM.mult[2]] + dt * (-1 / shared.dCM * ICM[i - 1 + (j - 1) * shared.dim.ICM.mult[1] + (k - 1) * shared.dim.ICM.mult[2]] + (internal.init_ICM_pre[j - 1 + (k - 1) * shared.dim.init_ICM_pre.mult[1]] - ICM[i - 1 + (j - 1) * shared.dim.ICM.mult[1] + (k - 1) * shared.dim.ICM.mult[2]]) / shared.x_I[i - 1]);
        }
      }
    }
    for (size_t i = 2; i <= static_cast<size_t>(shared.na); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.nh); ++j) {
        for (size_t k = 1; k <= static_cast<size_t>(shared.num_int); ++k) {
          state_next[i - 1 + (j - 1) * shared.dim.ICM.mult[1] + (k - 1) * shared.dim.ICM.mult[2] + shared.odin.offset.state[54]] = ICM[i - 1 + (j - 1) * shared.dim.ICM.mult[1] + (k - 1) * shared.dim.ICM.mult[2]] + dt * (-1 / shared.dCM * ICM[i - 1 + (j - 1) * shared.dim.ICM.mult[1] + (k - 1) * shared.dim.ICM.mult[2]] - (ICM[i - 1 + (j - 1) * shared.dim.ICM.mult[1] + (k - 1) * shared.dim.ICM.mult[2]] - ICM[i - 1 - 1 + (j - 1) * shared.dim.ICM.mult[1] + (k - 1) * shared.dim.ICM.mult[2]]) / shared.x_I[i - 1]);
        }
      }
    }
    {
      const size_t i = 1;
      for (size_t j = 1; j <= static_cast<size_t>(shared.nh); ++j) {
        for (size_t k = 1; k <= static_cast<size_t>(shared.num_int); ++k) {
          state_next[(j - 1) * shared.dim.ICA.mult[1] + (k - 1) * shared.dim.ICA.mult[2] + shared.odin.offset.state[55]] = ICA[i - 1 + (j - 1) * shared.dim.ICA.mult[1] + (k - 1) * shared.dim.ICA.mult[2]] + dt * (internal.FOI[i - 1 + (j - 1) * shared.dim.FOI.mult[1] + (k - 1) * shared.dim.FOI.mult[2]] / (internal.FOI[i - 1 + (j - 1) * shared.dim.FOI.mult[1] + (k - 1) * shared.dim.FOI.mult[2]] * shared.uCA + 1) - 1 / shared.dCA * ICA[i - 1 + (j - 1) * shared.dim.ICA.mult[1] + (k - 1) * shared.dim.ICA.mult[2]] - ICA[i - 1 + (j - 1) * shared.dim.ICA.mult[1] + (k - 1) * shared.dim.ICA.mult[2]] / shared.x_I[i - 1]);
        }
      }
    }
    for (size_t i = 2; i <= static_cast<size_t>(shared.na); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.nh); ++j) {
        for (size_t k = 1; k <= static_cast<size_t>(shared.num_int); ++k) {
          state_next[i - 1 + (j - 1) * shared.dim.ICA.mult[1] + (k - 1) * shared.dim.ICA.mult[2] + shared.odin.offset.state[55]] = ICA[i - 1 + (j - 1) * shared.dim.ICA.mult[1] + (k - 1) * shared.dim.ICA.mult[2]] + dt * (internal.FOI[i - 1 + (j - 1) * shared.dim.FOI.mult[1] + (k - 1) * shared.dim.FOI.mult[2]] / (internal.FOI[i - 1 + (j - 1) * shared.dim.FOI.mult[1] + (k - 1) * shared.dim.FOI.mult[2]] * shared.uCA + 1) - 1 / shared.dCA * ICA[i - 1 + (j - 1) * shared.dim.ICA.mult[1] + (k - 1) * shared.dim.ICA.mult[2]] - (ICA[i - 1 + (j - 1) * shared.dim.ICA.mult[1] + (k - 1) * shared.dim.ICA.mult[2]] - ICA[i - 1 - 1 + (j - 1) * shared.dim.ICA.mult[1] + (k - 1) * shared.dim.ICA.mult[2]]) / shared.x_I[i - 1]);
        }
      }
    }
    {
      const size_t i = 1;
      for (size_t j = 1; j <= static_cast<size_t>(shared.nh); ++j) {
        for (size_t k = 1; k <= static_cast<size_t>(shared.num_int); ++k) {
          state_next[(j - 1) * shared.dim.IB.mult[1] + (k - 1) * shared.dim.IB.mult[2] + shared.odin.offset.state[56]] = IB[i - 1 + (j - 1) * shared.dim.IB.mult[1] + (k - 1) * shared.dim.IB.mult[2]] + dt * (internal.EIR[i - 1 + (j - 1) * shared.dim.EIR.mult[1] + (k - 1) * shared.dim.EIR.mult[2]] / (internal.EIR[i - 1 + (j - 1) * shared.dim.EIR.mult[1] + (k - 1) * shared.dim.EIR.mult[2]] * shared.uB + 1) - IB[i - 1 + (j - 1) * shared.dim.IB.mult[1] + (k - 1) * shared.dim.IB.mult[2]] / shared.dB - IB[i - 1 + (j - 1) * shared.dim.IB.mult[1] + (k - 1) * shared.dim.IB.mult[2]] / shared.x_I[i - 1]);
        }
      }
    }
    for (size_t i = 2; i <= static_cast<size_t>(shared.na); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.nh); ++j) {
        for (size_t k = 1; k <= static_cast<size_t>(shared.num_int); ++k) {
          state_next[i - 1 + (j - 1) * shared.dim.IB.mult[1] + (k - 1) * shared.dim.IB.mult[2] + shared.odin.offset.state[56]] = IB[i - 1 + (j - 1) * shared.dim.IB.mult[1] + (k - 1) * shared.dim.IB.mult[2]] + dt * (internal.EIR[i - 1 + (j - 1) * shared.dim.EIR.mult[1] + (k - 1) * shared.dim.EIR.mult[2]] / (internal.EIR[i - 1 + (j - 1) * shared.dim.EIR.mult[1] + (k - 1) * shared.dim.EIR.mult[2]] * shared.uB + 1) - IB[i - 1 + (j - 1) * shared.dim.IB.mult[1] + (k - 1) * shared.dim.IB.mult[2]] / shared.dB - (IB[i - 1 + (j - 1) * shared.dim.IB.mult[1] + (k - 1) * shared.dim.IB.mult[2]] - IB[i - 1 - 1 + (j - 1) * shared.dim.IB.mult[1] + (k - 1) * shared.dim.IB.mult[2]]) / shared.x_I[i - 1]);
        }
      }
    }
    {
      const size_t i = 1;
      for (size_t j = 1; j <= static_cast<size_t>(shared.nh); ++j) {
        for (size_t k = 1; k <= static_cast<size_t>(shared.num_int); ++k) {
          state_next[(j - 1) * shared.dim.ID.mult[1] + (k - 1) * shared.dim.ID.mult[2] + shared.odin.offset.state[57]] = ID[i - 1 + (j - 1) * shared.dim.ID.mult[1] + (k - 1) * shared.dim.ID.mult[2]] + dt * (internal.FOI[i - 1 + (j - 1) * shared.dim.FOI.mult[1] + (k - 1) * shared.dim.FOI.mult[2]] / (internal.FOI[i - 1 + (j - 1) * shared.dim.FOI.mult[1] + (k - 1) * shared.dim.FOI.mult[2]] * shared.uD + 1) - ID[i - 1 + (j - 1) * shared.dim.ID.mult[1] + (k - 1) * shared.dim.ID.mult[2]] / shared.dID - ID[i - 1 + (j - 1) * shared.dim.ID.mult[1] + (k - 1) * shared.dim.ID.mult[2]] / shared.x_I[i - 1]);
        }
      }
    }
    for (size_t i = 2; i <= static_cast<size_t>(shared.na); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.nh); ++j) {
        for (size_t k = 1; k <= static_cast<size_t>(shared.num_int); ++k) {
          state_next[i - 1 + (j - 1) * shared.dim.ID.mult[1] + (k - 1) * shared.dim.ID.mult[2] + shared.odin.offset.state[57]] = ID[i - 1 + (j - 1) * shared.dim.ID.mult[1] + (k - 1) * shared.dim.ID.mult[2]] + dt * (internal.FOI[i - 1 + (j - 1) * shared.dim.FOI.mult[1] + (k - 1) * shared.dim.FOI.mult[2]] / (internal.FOI[i - 1 + (j - 1) * shared.dim.FOI.mult[1] + (k - 1) * shared.dim.FOI.mult[2]] * shared.uD + 1) - ID[i - 1 + (j - 1) * shared.dim.ID.mult[1] + (k - 1) * shared.dim.ID.mult[2]] / shared.dID - (ID[i - 1 + (j - 1) * shared.dim.ID.mult[1] + (k - 1) * shared.dim.ID.mult[2]] - ID[i - 1 - 1 + (j - 1) * shared.dim.ID.mult[1] + (k - 1) * shared.dim.ID.mult[2]]) / shared.x_I[i - 1]);
        }
      }
    }
    state_next[shared.odin.offset.state[58]] = FOIv[0] + dt * (lag_FOIv - (shared.lag_ratesMos / shared.delayGam) * FOIv[0]);
    for (size_t i = 2; i <= static_cast<size_t>(shared.lag_ratesMos); ++i) {
      state_next[i - 1 + shared.odin.offset.state[58]] = FOIv[i - 1] + dt * ((shared.lag_ratesMos / shared.delayGam) * FOIv[i - 1 - 1] - (shared.lag_ratesMos / shared.delayGam) * FOIv[i - 1]);
    }
    state_next[shared.odin.offset.state[59]] = ince_delay[0] + dt * (ince - (shared.lag_ratesMos / shared.delayMos_use) * ince_delay[0]);
    for (size_t i = 2; i <= static_cast<size_t>(shared.lag_ratesMos); ++i) {
      state_next[i - 1 + shared.odin.offset.state[59]] = ince_delay[i - 1] + dt * ((shared.lag_ratesMos / shared.delayMos_use) * ince_delay[i - 1 - 1] - (shared.lag_ratesMos / shared.delayMos_use) * ince_delay[i - 1]);
    }
    state_next[0] = (Sv + dt * (-ince - mu * Sv + betaa) < 0 ? 0 : Sv + dt * (-ince - mu * Sv + betaa));
    state_next[1] = (Pv + dt * (ince - incv - mu * Pv) < 0 ? 0 : Pv + dt * (ince - incv - mu * Pv));
    state_next[2] = (Iv + dt * (incv - mu * Iv) < 0 ? 0 : Iv + dt * (incv - mu * Iv));
    state_next[3] = Sv + Pv + Iv;
    state_next[4] = (mv * shared.human_pop) / shared.omega;
    state_next[5] = (Sv * shared.human_pop) / shared.omega;
    state_next[6] = (Pv * shared.human_pop) / shared.omega;
    state_next[7] = (Iv * shared.human_pop) / shared.omega;
    state_next[10] = (EL + dt * (beta_larval * mv - shared.muEL * (1 + (EL + LL) / KL) * EL - EL / shared.dEL) < 0 ? 0 : (EL + dt * (beta_larval * mv - shared.muEL * (1 + (EL + LL) / KL) * EL - EL / shared.dEL)));
    state_next[9] = (LL + dt * (EL / shared.dEL - shared.muLL * (1 + shared.gammaL * (EL + LL) / KL) * LL - LL / shared.dLL) < 0 ? 0 : (LL + dt * (EL / shared.dEL - shared.muLL * (1 + shared.gammaL * (EL + LL) / KL) * LL - LL / shared.dLL)));
    state_next[8] = (PL + dt * (LL / shared.dLL - shared.muPL * PL - PL / shared.dPL) < 0 ? 0 : (PL + dt * (LL / shared.dLL - shared.muPL * PL - PL / shared.dPL)));
    for (size_t i = 1; i <= shared.dim.n_ud_prev.size; ++i) {
      state_next[i - 1 + shared.odin.offset.state[60]] = internal.n_prev[i - 1];
    }
    for (size_t i = 1; i <= shared.dim.n_ud_detect_prev.size; ++i) {
      state_next[i - 1 + shared.odin.offset.state[61]] = internal.detect_prev[i - 1];
    }
    for (size_t i = 1; i <= shared.dim.n_ud_inc.size; ++i) {
      state_next[i - 1 + shared.odin.offset.state[62]] = dust2::array::sum<real_type>(internal.clin_inc.data(), shared.dim.clin_inc, {shared.min_age_inc[i - 1] - 1, shared.max_age_inc[i - 1] - 1}, {0, shared.dim.clin_inc.dim[1] - 1}, {0, shared.dim.clin_inc.dim[2] - 1}) / dt;
    }
    state_next[11] = Sh;
    state_next[12] = Th;
    state_next[13] = Dh;
    state_next[14] = Ah;
    state_next[15] = Uh;
    state_next[16] = Ph;
    state_next[17] = dust2::array::sum<real_type>(internal.icm_pop.data(), shared.dim.icm_pop) / H;
    state_next[18] = dust2::array::sum<real_type>(internal.ica_pop.data(), shared.dim.ica_pop) / H;
    state_next[19] = dust2::array::sum<real_type>(internal.id_pop.data(), shared.dim.id_pop) / H;
    state_next[20] = dust2::array::sum<real_type>(internal.ib_pop.data(), shared.dim.ib_pop) / H;
    state_next[21] = dust2::array::sum<real_type>(internal.ic_pop.data(), shared.dim.ic_pop) / H;
    state_next[22] = dust2::array::sum<real_type>(internal.all_deaths.data(), shared.dim.all_deaths);
    state_next[23] = mu;
    state_next[24] = dust2::array::sum<real_type>(internal.all_eir.data(), shared.dim.all_eir);
    state_next[25] = dust2::array::sum<real_type>(internal.epsilon_0.data(), shared.dim.epsilon_0);
    state_next[26] = dust2::array::sum<real_type>(internal.epsilon_0_no_int.data(), shared.dim.epsilon_0_no_int);
    state_next[27] = dust2::array::sum<real_type>(internal.epsilon_0_irs.data(), shared.dim.epsilon_0_irs);
    state_next[28] = dust2::array::sum<real_type>(internal.av_human.data(), shared.dim.av_human);
    state_next[29] = av;
    state_next[30] = wh;
    state_next[31] = internal.yy_[0];
    state_next[32] = internal.yy_[1];
    state_next[33] = internal.yy_[2];
    state_next[34] = internal.w_[0];
    state_next[35] = internal.w_[1];
    state_next[36] = internal.w_[2];
    state_next[37] = internal.w_[3];
    state_next[38] = internal.z_[0];
    state_next[39] = internal.z_[1];
    state_next[40] = internal.z_[2];
    state_next[41] = internal.z_[3];
    state_next[42] = wbar;
    state_next[43] = zbar;
    state_next[44] = dust2::array::sum<real_type>(internal.epsilon_0_foi.data(), shared.dim.epsilon_0_foi);
    state_next[45] = FOIv[shared.lag_ratesMos - 1];
    state_next[46] = lag_FOIv;
  }
};

#include <cpp11.hpp>
#include <dust2/r/discrete/system.hpp>

[[cpp11::register]]
SEXP dust2_system_malariasimple_deterministic_ITN_IRS_alloc(cpp11::list r_pars, cpp11::sexp r_time, cpp11::list r_time_control, cpp11::sexp r_n_particles, cpp11::sexp r_n_groups, cpp11::sexp r_seed, cpp11::sexp r_deterministic, cpp11::sexp r_n_threads) {
  return dust2::r::dust2_discrete_alloc<malariasimple_deterministic_ITN_IRS>(r_pars, r_time, r_time_control, r_n_particles, r_n_groups, r_seed, r_deterministic, r_n_threads);
}
[[cpp11::register]]
SEXP dust2_system_malariasimple_deterministic_ITN_IRS_run_to_time(cpp11::sexp ptr, cpp11::sexp r_time) {
  return dust2::r::dust2_system_run_to_time<dust2::dust_discrete<malariasimple_deterministic_ITN_IRS>>(ptr, r_time);
}

[[cpp11::register]]
SEXP dust2_system_malariasimple_deterministic_ITN_IRS_state(cpp11::sexp ptr, cpp11::sexp r_index_state, cpp11::sexp r_index_particle, cpp11::sexp r_index_group, bool preserve_particle_dimension, bool preserve_group_dimension) {
  return dust2::r::dust2_system_state<dust2::dust_discrete<malariasimple_deterministic_ITN_IRS>>(ptr, r_index_state, r_index_particle, r_index_group, preserve_particle_dimension, preserve_group_dimension);
}

[[cpp11::register]]
SEXP dust2_system_malariasimple_deterministic_ITN_IRS_time(cpp11::sexp ptr) {
  return dust2::r::dust2_system_time<dust2::dust_discrete<malariasimple_deterministic_ITN_IRS>>(ptr);
}

[[cpp11::register]]
SEXP dust2_system_malariasimple_deterministic_ITN_IRS_set_state_initial(cpp11::sexp ptr) {
  return dust2::r::dust2_system_set_state_initial<dust2::dust_discrete<malariasimple_deterministic_ITN_IRS>>(ptr);
}

[[cpp11::register]]
SEXP dust2_system_malariasimple_deterministic_ITN_IRS_set_state(cpp11::sexp ptr, cpp11::list r_state) {
  return dust2::r::dust2_system_set_state<dust2::dust_discrete<malariasimple_deterministic_ITN_IRS>>(ptr, r_state);
}

[[cpp11::register]]
SEXP dust2_system_malariasimple_deterministic_ITN_IRS_reorder(cpp11::sexp ptr, cpp11::integers r_index) {
  return dust2::r::dust2_system_reorder<dust2::dust_discrete<malariasimple_deterministic_ITN_IRS>>(ptr, r_index);
}

[[cpp11::register]]
SEXP dust2_system_malariasimple_deterministic_ITN_IRS_rng_state(cpp11::sexp ptr) {
  return dust2::r::dust2_system_rng_state<dust2::dust_discrete<malariasimple_deterministic_ITN_IRS>>(ptr);
}

[[cpp11::register]]
SEXP dust2_system_malariasimple_deterministic_ITN_IRS_set_rng_state(cpp11::sexp ptr, cpp11::sexp r_rng_state) {
  return dust2::r::dust2_system_set_rng_state<dust2::dust_discrete<malariasimple_deterministic_ITN_IRS>>(ptr, r_rng_state);
}

[[cpp11::register]]
SEXP dust2_system_malariasimple_deterministic_ITN_IRS_set_time(cpp11::sexp ptr, cpp11::sexp r_time) {
  return dust2::r::dust2_system_set_time<dust2::dust_discrete<malariasimple_deterministic_ITN_IRS>>(ptr, r_time);
}

[[cpp11::register]]
SEXP dust2_system_malariasimple_deterministic_ITN_IRS_update_pars(cpp11::sexp ptr, cpp11::list pars) {
  return dust2::r::dust2_system_update_pars<dust2::dust_discrete<malariasimple_deterministic_ITN_IRS>>(ptr, pars);
}

[[cpp11::register]]
SEXP dust2_system_malariasimple_deterministic_ITN_IRS_simulate(cpp11::sexp ptr, cpp11::sexp r_times, cpp11::sexp r_index_state, bool preserve_particle_dimension, bool preserve_group_dimension) {
  return dust2::r::dust2_system_simulate<dust2::dust_discrete<malariasimple_deterministic_ITN_IRS>>(ptr, r_times, r_index_state, preserve_particle_dimension, preserve_group_dimension);
}
