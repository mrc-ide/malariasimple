// Generated by dust2 (version 0.3.4) - do not edit

// Generated by odin2 (version 0.3.2) - do not edit
#include <dust2/common.hpp>
// [[dust2::class(stochastic_test)]]
// [[dust2::time_type(discrete)]]
// [[dust2::parameter(na, type = "int", rank = 0, required = TRUE, constant = TRUE)]]
// [[dust2::parameter(nh, type = "int", rank = 0, required = TRUE, constant = TRUE)]]
// [[dust2::parameter(eta, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(init_S, type = "real_type", rank = 2, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(het_wt, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
class stochastic_test {
public:
  stochastic_test() = delete;
  using real_type = double;
  using rng_state_type = monty::random::generator<real_type>;
  struct shared_state {
    struct dim_type {
      dust2::array::dimensions<2> init_S;
      dust2::array::dimensions<2> S;
      dust2::array::dimensions<1> births;
      dust2::array::dimensions<1> birth_rate;
      dust2::array::dimensions<1> birth_prob;
      dust2::array::dimensions<1> het_wt;
      dust2::array::dimensions<2> deaths;
    } dim;
    struct offset_type {
      struct {
        size_t S;
      } state;
    } offset;
    int na;
    int nh;
    real_type eta;
    std::vector<real_type> init_S;
    std::vector<real_type> het_wt;
    std::vector<real_type> birth_rate;
  };
  struct internal_state {
    std::vector<real_type> deaths;
    std::vector<real_type> birth_prob;
    std::vector<real_type> births;
  };
  using data_type = dust2::no_data;
  static dust2::packing packing_state(const shared_state& shared) {
    return dust2::packing{
      {"S", std::vector<size_t>(shared.dim.S.dim.begin(), shared.dim.S.dim.end())}
    };
  }
  static dust2::packing packing_gradient(const shared_state& shared) {
    return dust2::packing{
    };
  }
  static shared_state build_shared(cpp11::list parameters) {
    shared_state::dim_type dim;
    const int na = dust2::r::read_int(parameters, "na");
    const int nh = dust2::r::read_int(parameters, "nh");
    const real_type eta = dust2::r::read_real(parameters, "eta");
    dim.init_S.set({static_cast<size_t>(na), static_cast<size_t>(nh)});
    dim.S.set({static_cast<size_t>(na), static_cast<size_t>(nh)});
    dim.births.set({static_cast<size_t>(nh)});
    dim.birth_rate.set({static_cast<size_t>(nh)});
    dim.birth_prob.set({static_cast<size_t>(nh)});
    dim.het_wt.set({static_cast<size_t>(nh)});
    dim.deaths.set({static_cast<size_t>(na), static_cast<size_t>(nh)});
    std::vector<real_type> init_S(dim.init_S.size);
    dust2::r::read_real_array(parameters, dim.init_S, init_S.data(), "init_S", true);
    std::vector<real_type> het_wt(dim.het_wt.size);
    dust2::r::read_real_array(parameters, dim.het_wt, het_wt.data(), "het_wt", true);
    std::vector<real_type> birth_rate(dim.birth_rate.size);
    for (size_t i = 1; i <= dim.birth_rate.size; ++i) {
      birth_rate[i - 1] = eta * het_wt[i - 1];
    }
    shared_state::offset_type offset;
    offset.state.S = 0;
    return shared_state{dim, offset, na, nh, eta, init_S, het_wt, birth_rate};
  }
  static internal_state build_internal(const shared_state& shared) {
    std::vector<real_type> deaths(shared.dim.deaths.size);
    std::vector<real_type> birth_prob(shared.dim.birth_prob.size);
    std::vector<real_type> births(shared.dim.births.size);
    return internal_state{deaths, birth_prob, births};
  }
  static void update_shared(cpp11::list parameters, shared_state& shared) {
    shared.eta = dust2::r::read_real(parameters, "eta", shared.eta);
    dust2::r::read_real_array(parameters, shared.dim.init_S, shared.init_S.data(), "init_S", false);
    dust2::r::read_real_array(parameters, shared.dim.het_wt, shared.het_wt.data(), "het_wt", false);
    for (size_t i = 1; i <= shared.dim.birth_rate.size; ++i) {
      shared.birth_rate[i - 1] = shared.eta * shared.het_wt[i - 1];
    }
  }
  static void update_internal(const shared_state& shared, internal_state& internal) {
  }
  static void initial(real_type time, const shared_state& shared, internal_state& internal, rng_state_type& rng_state, real_type* state) {
    for (size_t i = 1; i <= shared.dim.S.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.S.dim[1]; ++j) {
        state[i - 1 + (j - 1) * shared.dim.S.mult[1] + 0] = shared.init_S[i - 1 + (j - 1) * shared.dim.init_S.mult[1]];
      }
    }
  }
  static void update(real_type time, real_type dt, const real_type* state, const shared_state& shared, internal_state& internal, rng_state_type& rng_state, real_type* state_next) {
    const auto * S = state + 0;
    const real_type H = dust2::array::sum<real_type>(S, shared.dim.S);
    const real_type death_rate = shared.eta * dt;
    const real_type death_prob = 1 - monty::math::exp(-death_rate);
    for (size_t i = 1; i <= shared.dim.deaths.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.deaths.dim[1]; ++j) {
        internal.deaths[i - 1 + (j - 1) * shared.dim.deaths.mult[1]] = monty::random::binomial<real_type>(rng_state, S[i - 1 + (j - 1) * shared.dim.S.mult[1]], death_prob);
      }
    }
    for (size_t i = 1; i <= shared.dim.birth_prob.size; ++i) {
      internal.birth_prob[i - 1] = 1 - monty::math::exp(-(shared.birth_rate[i - 1] * dt));
    }
    for (size_t i = 1; i <= shared.dim.births.size; ++i) {
      internal.births[i - 1] = monty::random::binomial<real_type>(rng_state, H, internal.birth_prob[i - 1]);
    }
    {
      const size_t i = 1;
      for (size_t j = 1; j <= static_cast<size_t>(shared.nh); ++j) {
        state_next[(j - 1) * shared.dim.S.mult[1] + 0] = S[i - 1 + (j - 1) * shared.dim.S.mult[1]] + internal.births[j - 1];
      }
    }
    for (size_t i = 2; i <= static_cast<size_t>(shared.na); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.nh); ++j) {
        state_next[i - 1 + (j - 1) * shared.dim.S.mult[1] + 0] = S[i - 1 + (j - 1) * shared.dim.S.mult[1]] - internal.deaths[i - 1 + (j - 1) * shared.dim.deaths.mult[1]];
      }
    }
  }
  static auto zero_every(const shared_state& shared) {
    return dust2::zero_every_type<real_type>();
  }
};

#include <cpp11.hpp>
#include <dust2/r/discrete/system.hpp>

[[cpp11::register]]
SEXP dust2_system_stochastic_test_alloc(cpp11::list r_pars, cpp11::sexp r_time, cpp11::list r_time_control, cpp11::sexp r_n_particles, cpp11::sexp r_n_groups, cpp11::sexp r_seed, cpp11::sexp r_deterministic, cpp11::sexp r_n_threads) {
  return dust2::r::dust2_discrete_alloc<stochastic_test>(r_pars, r_time, r_time_control, r_n_particles, r_n_groups, r_seed, r_deterministic, r_n_threads);
}
[[cpp11::register]]
SEXP dust2_system_stochastic_test_run_to_time(cpp11::sexp ptr, cpp11::sexp r_time) {
  return dust2::r::dust2_system_run_to_time<dust2::dust_discrete<stochastic_test>>(ptr, r_time);
}

[[cpp11::register]]
SEXP dust2_system_stochastic_test_state(cpp11::sexp ptr, cpp11::sexp r_index_state, cpp11::sexp r_index_particle, cpp11::sexp r_index_group, bool preserve_particle_dimension, bool preserve_group_dimension) {
  return dust2::r::dust2_system_state<dust2::dust_discrete<stochastic_test>>(ptr, r_index_state, r_index_particle, r_index_group, preserve_particle_dimension, preserve_group_dimension);
}

[[cpp11::register]]
SEXP dust2_system_stochastic_test_time(cpp11::sexp ptr) {
  return dust2::r::dust2_system_time<dust2::dust_discrete<stochastic_test>>(ptr);
}

[[cpp11::register]]
SEXP dust2_system_stochastic_test_set_state_initial(cpp11::sexp ptr) {
  return dust2::r::dust2_system_set_state_initial<dust2::dust_discrete<stochastic_test>>(ptr);
}

[[cpp11::register]]
SEXP dust2_system_stochastic_test_set_state(cpp11::sexp ptr, cpp11::list r_state) {
  return dust2::r::dust2_system_set_state<dust2::dust_discrete<stochastic_test>>(ptr, r_state);
}

[[cpp11::register]]
SEXP dust2_system_stochastic_test_reorder(cpp11::sexp ptr, cpp11::integers r_index) {
  return dust2::r::dust2_system_reorder<dust2::dust_discrete<stochastic_test>>(ptr, r_index);
}

[[cpp11::register]]
SEXP dust2_system_stochastic_test_rng_state(cpp11::sexp ptr) {
  return dust2::r::dust2_system_rng_state<dust2::dust_discrete<stochastic_test>>(ptr);
}

[[cpp11::register]]
SEXP dust2_system_stochastic_test_set_rng_state(cpp11::sexp ptr, cpp11::sexp r_rng_state) {
  return dust2::r::dust2_system_set_rng_state<dust2::dust_discrete<stochastic_test>>(ptr, r_rng_state);
}

[[cpp11::register]]
SEXP dust2_system_stochastic_test_set_time(cpp11::sexp ptr, cpp11::sexp r_time) {
  return dust2::r::dust2_system_set_time<dust2::dust_discrete<stochastic_test>>(ptr, r_time);
}

[[cpp11::register]]
SEXP dust2_system_stochastic_test_update_pars(cpp11::sexp ptr, cpp11::list pars) {
  return dust2::r::dust2_system_update_pars<dust2::dust_discrete<stochastic_test>>(ptr, pars);
}

[[cpp11::register]]
SEXP dust2_system_stochastic_test_simulate(cpp11::sexp ptr, cpp11::sexp r_times, cpp11::sexp r_index_state, bool preserve_particle_dimension, bool preserve_group_dimension) {
  return dust2::r::dust2_system_simulate<dust2::dust_discrete<stochastic_test>>(ptr, r_times, r_index_state, preserve_particle_dimension, preserve_group_dimension);
}
